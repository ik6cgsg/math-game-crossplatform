{
  "taskSet": {
    "code": "game_029_set_combo_1",
    "version": 0,
    "namespaceCode": "",
    "nameEn": "Sets Logic-1",
    "nameRu": "Множества-1",
    "subjectType": "standard_math",
    "tasks": [
      {
        "code": "game_029_set_combo_1__Level_01_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 1 Prove",
        "nameRu": "Уровень 1 Доказательство",
        "descriptionShortEn": "(or(A;not(or(B;C))))",
        "descriptionShortRu": "(or(A;not(or(B;C))))",
        "originalExpressionStructureString": "(and(or(A;not(B));or(A;not(C))))",
        "goalExpressionStructureString": "(or(A;not(or(B;C))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAndOrBase"
          }
        ],
        "rules": [],
        "stepsNumber": 2,
        "time": 50,
        "difficulty": 1.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_02_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 2 Prove",
        "nameRu": "Уровень 2 Доказательство",
        "descriptionShortEn": "(A)",
        "descriptionShortRu": "(A)",
        "originalExpressionStructureString": "(or(A;and(A;B)))",
        "goalExpressionStructureString": "(A)",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAndOrBase"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_03_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 3 Prove",
        "nameRu": "Уровень 3 Доказательство",
        "descriptionShortEn": "(implic(or(A;B);C))",
        "descriptionShortRu": "(implic(or(A;B);C))",
        "originalExpressionStructureString": "(or(set-(not(A);B);C))",
        "goalExpressionStructureString": "(implic(or(A;B);C))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 60,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_04_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 4 Prove",
        "nameRu": "Уровень 4 Доказательство",
        "descriptionShortEn": "(or(and(A;B);C))",
        "descriptionShortRu": "(or(and(A;B);C))",
        "originalExpressionStructureString": "(implic(implic(A;not(B));C))",
        "goalExpressionStructureString": "(or(and(A;B);C))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 4,
        "time": 60,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_05_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 5 Prove",
        "nameRu": "Уровень 5 Доказательство",
        "descriptionShortEn": "(implic(A;implic(B;implic(C;B))))",
        "descriptionShortRu": "(implic(A;implic(B;implic(C;B))))",
        "originalExpressionStructureString": "(implic(and(A;B);or(not(C);B)))",
        "goalExpressionStructureString": "(implic(A;implic(B;implic(C;B))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 7,
        "time": 90,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_06_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 6 Prove",
        "nameRu": "Уровень 6 Доказательство",
        "descriptionShortEn": "(not(B))",
        "descriptionShortRu": "(not(B))",
        "originalExpressionStructureString": "(set-(not(and(A;B));B))",
        "goalExpressionStructureString": "(not(B))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 6,
        "time": 90,
        "difficulty": 2.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_07_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 7 Prove",
        "nameRu": "Уровень 7 Доказательство",
        "descriptionShortEn": "(implic(implic(A;or(B;C));implic(B;C)))",
        "descriptionShortRu": "(implic(implic(A;or(B;C));implic(B;C)))",
        "originalExpressionStructureString": "(or(set-(set-(A;B);C);or(not(B);C)))",
        "goalExpressionStructureString": "(implic(implic(A;or(B;C));implic(B;C)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 8,
        "time": 150,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_08_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 8 Prove",
        "nameRu": "Уровень 8 Доказательство",
        "descriptionShortEn": "(and(not(set-(A;B));not(set-(B;A))))",
        "descriptionShortRu": "(and(not(set-(A;B));not(set-(B;A))))",
        "originalExpressionStructureString": "(implic(or(A;B);and(A;B)))",
        "goalExpressionStructureString": "(and(not(set-(A;B));not(set-(B;A))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 13,
        "time": 200,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_09_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 9 Prove",
        "nameRu": "Уровень 9 Доказательство",
        "descriptionShortEn": "(or(set-(A;B);set-(B;A)))",
        "descriptionShortRu": "(or(set-(A;B);set-(B;A)))",
        "originalExpressionStructureString": "(set-(or(A;B);and(implic(A;B);implic(B;A))))",
        "goalExpressionStructureString": "(or(set-(A;B);set-(B;A)))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 22,
        "time": 300,
        "difficulty": 3.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_10_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 10 Prove",
        "nameRu": "Уровень 10 Доказательство",
        "descriptionShortEn": "(or(set-(D;B);set-(A;or(C;D))))",
        "descriptionShortRu": "(or(set-(D;B);set-(A;or(C;D))))",
        "originalExpressionStructureString": "(implic(implic(set-(A;C);D);set-(D;B)))",
        "goalExpressionStructureString": "(or(set-(D;B);set-(A;or(C;D))))",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 10,
        "time": 200,
        "difficulty": 4.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_11_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 11 Prove",
        "nameRu": "Уровень 11 Доказательство",
        "descriptionShortEn": "(0)",
        "descriptionShortRu": "(0)",
        "originalExpressionStructureString": "(and(or(A;B;C);implic(A;or(C;D));implic(C;or(B;D));not(B);not(D)))",
        "goalExpressionStructureString": "(0)",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 16,
        "time": 350,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      },
      {
        "code": "game_029_set_combo_1__Level_12_Prove",
        "version": 0,
        "namespaceCode": "",
        "nameEn": "Level 12 Prove",
        "nameRu": "Уровень 12 Доказательство",
        "descriptionShortEn": "(0)",
        "descriptionShortRu": "(0)",
        "originalExpressionStructureString": "(and(or(A;B);implic(not(C);not(A));implic(not(D);not(B));not(or(C;D));not(or(not(C);not(D)))))",
        "goalExpressionStructureString": "(0)",
        "rulePacks": [
          {
            "namespaceCode": "",
            "rulePackCode": "LogicImplicationDifference"
          },
          {
            "namespaceCode": "",
            "rulePackCode": "LogicAbsorptionLaw"
          }
        ],
        "rules": [],
        "stepsNumber": 11,
        "time": 300,
        "difficulty": 5.0,
        "otherCheckSolutionData": {}
      }
    ]
  },
  "rulePacks": [
    {
      "code": "SetDeMorgan",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(not(and(A;B)))",
          "rightStructureString": "(or(not(A);not(B)))",
          "priority": 15
        },
        {
          "leftStructureString": "(or(not(A);not(B)))",
          "rightStructureString": "(not(and(A;B)))",
          "priority": 10
        },
        {
          "leftStructureString": "(not(or(A;B)))",
          "rightStructureString": "(and(not(A);not(B)))",
          "priority": 15
        },
        {
          "leftStructureString": "(and(not(A);not(B)))",
          "rightStructureString": "(not(or(A;B)))",
          "priority": 10
        }
      ]
    },
    {
      "code": "LogicAndOrBase",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "SetDeMorgan"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(not(not(a)))",
          "rightStructureString": "(a)",
          "priority": 5
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(not(not(a)))",
          "priority": 89,
          "isExtending": true
        },
        {
          "leftStructureString": "(or(a;a))",
          "rightStructureString": "(a)",
          "priority": 5
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;a))",
          "priority": 90,
          "isExtending": true
        },
        {
          "leftStructureString": "(and(a;a))",
          "rightStructureString": "(a)",
          "priority": 5
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(and(a;a))",
          "priority": 90,
          "isExtending": true
        },
        {
          "leftStructureString": "(and(a;b))",
          "rightStructureString": "(and(b;a))",
          "priority": 40,
          "isExtending": true
        },
        {
          "leftStructureString": "(or(a;b))",
          "rightStructureString": "(or(b;a))",
          "priority": 40,
          "isExtending": true
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(and(a;1))",
          "priority": 90,
          "isExtending": true
        },
        {
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;0))",
          "priority": 90,
          "isExtending": true
        },
        {
          "leftStructureString": "(or(A;not(A)))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(or(not(A);A))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(and(A;not(A)))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(and(not(A);A))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(or(A;1))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(or(1;A))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(and(A;1))",
          "rightStructureString": "(A)",
          "priority": 5
        },
        {
          "leftStructureString": "(and(1;A))",
          "rightStructureString": "(A)",
          "priority": 5
        },
        {
          "leftStructureString": "(or(A;0))",
          "rightStructureString": "(A)",
          "priority": 5
        },
        {
          "leftStructureString": "(or(0;A))",
          "rightStructureString": "(A)",
          "priority": 5
        },
        {
          "leftStructureString": "(and(A;0))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(and(0;A))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(not(0))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(not(1))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "code": "SimpleComputation",
          "priority": 5
        },
        {
          "code": "ZeroComputation",
          "priority": 5
        },
        {
          "code": "SetComplicatingExtension",
          "priority": 92
        },
        {
          "code": "ParentBracketsExpansion",
          "priority": 30
        },
        {
          "code": "ArgumentsSwap",
          "priority": 40
        },
        {
          "code": "ArgumentsPermutation",
          "priority": 40
        },
        {
          "code": "OpeningBrackets",
          "priority": 30
        },
        {
          "code": "ArgumentsPermutationInOriginalOrder",
          "priority": 41
        },
        {
          "code": "ReduceArithmetic",
          "priority": 10
        },
        {
          "code": "TwoSidesArithmeticReduce",
          "priority": 10
        }
      ]
    },
    {
      "code": "LogicImplicationDifference",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [
        {
          "namespaceCode": "",
          "rulePackCode": "LogicAndOrBase"
        }
      ],
      "rules": [
        {
          "leftStructureString": "(or(not(A);B))",
          "rightStructureString": "(implic(A;B))"
        },
        {
          "leftStructureString": "(or(B;not(A)))",
          "rightStructureString": "(implic(A;B))"
        },
        {
          "leftStructureString": "(implic(A;B))",
          "rightStructureString": "(or(not(A);B))"
        },
        {
          "leftStructureString": "(and(A;not(B)))",
          "rightStructureString": "(set-(A;B))"
        },
        {
          "leftStructureString": "(and(not(B);A))",
          "rightStructureString": "(set-(A;B))"
        },
        {
          "leftStructureString": "(set-(A;B))",
          "rightStructureString": "(and(A;not(B)))"
        },
        {
          "leftStructureString": "(set-(A;B))",
          "rightStructureString": "(not(implic(A;B)))"
        },
        {
          "leftStructureString": "(not(implic(A;B)))",
          "rightStructureString": "(set-(A;B))"
        },
        {
          "leftStructureString": "(implic(A;B))",
          "rightStructureString": "(not(set-(A;B)))"
        },
        {
          "leftStructureString": "(not(set-(A;B)))",
          "rightStructureString": "(implic(A;B))"
        },
        {
          "leftStructureString": "(set-(A;0))",
          "rightStructureString": "(A)",
          "priority": 5
        },
        {
          "leftStructureString": "(set-(A;1))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(set-(0;A))",
          "rightStructureString": "(0)",
          "priority": 5
        },
        {
          "leftStructureString": "(set-(1;A))",
          "rightStructureString": "(not(A))",
          "priority": 5
        },
        {
          "leftStructureString": "(implic(0;A))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(implic(A;1))",
          "rightStructureString": "(1)",
          "priority": 5
        },
        {
          "leftStructureString": "(implic(A;0))",
          "rightStructureString": "(not(A))",
          "priority": 5
        },
        {
          "leftStructureString": "(implic(1;A))",
          "rightStructureString": "(A)",
          "priority": 5
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(set-(A;0))",
          "priority": 91,
          "isExtending": true
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(implic(1;A))",
          "priority": 91,
          "isExtending": true
        }
      ]
    },
    {
      "code": "LogicAbsorptionLaw",
      "version": 0,
      "namespaceCode": "",
      "subjectType": "set",
      "rulePacks": [],
      "rules": [
        {
          "leftStructureString": "(and(A;or(A;B)))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(or(A;and(A;B)))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(and(A;or(B;A)))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(or(A;and(B;A)))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(and(or(A;B);A))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(or(and(A;B);A))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(and(or(B;A);A))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(or(and(B;A);A))",
          "rightStructureString": "(A)",
          "priority": 6
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(and(A;or(A;B)))",
          "priority": 90,
          "isExtending": true
        },
        {
          "leftStructureString": "(A)",
          "rightStructureString": "(or(A;and(A;B)))",
          "priority": 90,
          "isExtending": true
        }
      ]
    }
  ]
}