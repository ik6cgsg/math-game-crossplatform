{
  "taskSet": {
    "code": "global__SubstifyBooleanLogicGameTasks",
    "version": 0,
    "namespaceCode": "global",
    "nameEn": "Substify Boolean Logic Tasks",
    "nameRu": "Задачи на булеву логику из Substify",
    "descriptionShortEn": "Boolean Expressions Transformations",
    "descriptionShortRu": "Преобразования булевых выражений",
    "descriptionEn": "Conjunction, Disjunction, Negation, Implication, Xor, Equivalence",
    "descriptionRu": "Конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквивалентность",
    "subjectType": "logic",
    "tags": [
      "Logic"
    ],
    "tasks": [
      {
        "code": "global__SubstifyBooleanLogicGameTasks__1_DoubleNegation",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Double  Negation",
        "nameRu": "Двойное отрицание",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Double  Negation, complementation",
        "descriptionRu": "Двойное отрицание, дополнительность",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "not"
        ],
        "originalExpressionStructureString": "(and(not(not(a));not(a)))",
        "originalExpressionTex": " \\neg  \\neg a \\land  \\neg a",
        "originalExpressionPlainText": "!(!a)&!a",
        "goalType": "expression",
        "goalExpressionStructureString": "(0)",
        "goalExpressionTex": "0",
        "goalExpressionPlainText": "0",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNeg"
          }
        ],
        "stepsNumber": 2,
        "difficulty": 1.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__2_Distributivity",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Distributivity",
        "nameRu": "Дистрибутивность",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Distributivity, complementation, identity",
        "descriptionRu": "Дистрибутивность, дополнительность, идентичность",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "or",
          "not"
        ],
        "originalExpressionStructureString": "(and(or(a;not(b));or(a;b)))",
        "originalExpressionTex": "\\left(a \\lor  \\neg b\\right) \\land \\left(a \\lor b\\right)",
        "originalExpressionPlainText": "(a|!b)&(a|b)",
        "goalType": "expression",
        "goalExpressionStructureString": "(a)",
        "goalExpressionTex": "a",
        "goalExpressionPlainText": "a",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNeg"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 1.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__3_DeMorgansLaw",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "De Morgan's Law",
        "nameRu": "Закон де Моргана",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Distributivity, de Morgan's Law, commutativity",
        "descriptionRu": "Дистрибутивность, закон де Моргана, коммутативность",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "or",
          "not"
        ],
        "originalExpressionStructureString": "(and(or(a;not(c));or(a;not(b))))",
        "originalExpressionTex": "\\left(a \\lor  \\neg c\\right) \\land \\left(a \\lor  \\neg b\\right)",
        "originalExpressionPlainText": "(a|!c)&(a|!b)",
        "goalType": "expression",
        "goalExpressionStructureString": "(or(a;not(or(b;c))))",
        "goalExpressionTex": "a \\lor  \\neg \\left(b \\lor c\\right)",
        "goalExpressionPlainText": "a|!(b|c)",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNeg"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 1.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__4_Multiselection",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Multiselection",
        "nameRu": "Мультивыделение",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Associativity by long tap to select to 2 items, de Morgan's Law",
        "descriptionRu": "Ассоциативность по долгому нажатию для выделения 2 мест, закон де Моргана",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "or",
          "not",
          "and"
        ],
        "originalExpressionStructureString": "(or(a;not(b);c;not(d)))",
        "originalExpressionTex": "a \\lor  \\neg b \\lor c \\lor  \\neg d",
        "originalExpressionPlainText": "a|!b|c|!d",
        "goalType": "expression",
        "goalExpressionStructureString": "(or(a;c;not(and(b;d))))",
        "goalExpressionTex": "a \\lor c \\lor  \\neg \\left(b \\land d\\right)",
        "goalExpressionPlainText": "a|c|!(b&d)",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNeg"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 1.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__5_TripleDeMorgansLaw",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Triple de Morgan's Law",
        "nameRu": "Закон де Моргана для трех",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Multiselection, multiple de Morgan's Law",
        "descriptionRu": "Мультивыделение, многоразовый закон де Моргана",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "not",
          "and",
          "or"
        ],
        "originalExpressionStructureString": "(not(and(a;b;c)))",
        "originalExpressionTex": " \\neg \\left(a \\land b \\land c\\right)",
        "originalExpressionPlainText": "!(a&b&c)",
        "goalType": "expression",
        "goalExpressionStructureString": "(or(not(a);not(b);not(c)))",
        "goalExpressionTex": " \\neg a \\lor  \\neg b \\lor  \\neg c",
        "goalExpressionPlainText": "!a|!b|!c",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNeg"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__6_AbsorptionLaw",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Absorption Law",
        "nameRu": "Закон поглощения",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Identity, distributivity, identity",
        "descriptionRu": "Идентичность, дистрибутивность, идентичность",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Trick",
          "Proof",
          "or",
          "and"
        ],
        "originalExpressionStructureString": "(or(a;and(a;b)))",
        "originalExpressionTex": "a \\lor \\left(a \\land b\\right)",
        "originalExpressionPlainText": "a|(a&b)",
        "goalType": "expression",
        "goalExpressionStructureString": "(a)",
        "goalExpressionTex": "a",
        "goalExpressionPlainText": "a",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNeg"
          }
        ],
        "stepsNumber": 4,
        "difficulty": 3.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__7_Implication",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Implication",
        "nameRu": "Импликация",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Implication, distributivity, de Morgan's Law, implication",
        "descriptionRu": "Импликация, дистрибутивность, закон де Моргана, импликация",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "implic",
          "not",
          "or"
        ],
        "originalExpressionStructureString": "(and(implic(not(b);a);implic(c;a)))",
        "originalExpressionTex": "\\left( \\neg b \\implies a\\right) \\land \\left(c \\implies a\\right)",
        "originalExpressionPlainText": "(!b->a)&(c->a)",
        "goalType": "expression",
        "goalExpressionStructureString": "(or(a;not(implic(b;c))))",
        "goalExpressionTex": "a \\lor  \\neg \\left(b \\implies c\\right)",
        "goalExpressionPlainText": "a|!(b->c)",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplic"
          }
        ],
        "stepsNumber": 5,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__8_ImplicationOfNegations",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Implication of Negations",
        "nameRu": "Импликация отрицаний",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Implication, commutativity, implication",
        "descriptionRu": "Импликация, коммутативность, импликация",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "implic",
          "not"
        ],
        "originalExpressionStructureString": "(implic(not(b);not(a)))",
        "originalExpressionTex": " \\neg b \\implies  \\neg a",
        "originalExpressionPlainText": "!b->!a",
        "goalType": "expression",
        "goalExpressionStructureString": "(implic(a;b))",
        "goalExpressionTex": "a \\implies b",
        "goalExpressionPlainText": "a->b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplic"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__9_ImplicationAbsorption",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Implication Absorption",
        "nameRu": "Импликационное поглощение",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Implication, identity, distributivity, identity",
        "descriptionRu": "Импликация, идентичность, дистрибутивность, идентичность",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Trick",
          "Proof",
          "and",
          "implic"
        ],
        "originalExpressionStructureString": "(and(a;implic(b;a)))",
        "originalExpressionTex": "a \\land \\left(b \\implies a\\right)",
        "originalExpressionPlainText": "a&(b->a)",
        "goalType": "expression",
        "goalExpressionStructureString": "(a)",
        "goalExpressionTex": "a",
        "goalExpressionPlainText": "a",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplic"
          }
        ],
        "stepsNumber": 5,
        "difficulty": 3.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__10_ImplicationDistributivity",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Implication Distributivity",
        "nameRu": "Дистрибутивность импликации",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Implication, distributivity, implication",
        "descriptionRu": "Импликация, дистрибутивность, импликация",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "implic"
        ],
        "originalExpressionStructureString": "(and(implic(a;b);implic(a;c)))",
        "originalExpressionTex": "\\left(a \\implies b\\right) \\land \\left(a \\implies c\\right)",
        "originalExpressionPlainText": "(a->b)&(a->c)",
        "goalType": "expression",
        "goalExpressionStructureString": "(implic(a;and(b;c)))",
        "goalExpressionTex": "a \\implies \\left(b \\land c\\right)",
        "goalExpressionPlainText": "a->(b&c)",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplic"
          }
        ],
        "stepsNumber": 4,
        "difficulty": 3.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__11_OrImplicationDistributivity",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Or Implication Distributivity",
        "nameRu": "Дистрибутивность или от импликации",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Implication, identity, de Morgan's Law, implication",
        "descriptionRu": "Импликация, идентичность, закон де Моргана, импликация",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "or",
          "implic",
          "and"
        ],
        "originalExpressionStructureString": "(or(implic(a;c);implic(b;c)))",
        "originalExpressionTex": "\\left(a \\implies c\\right) \\lor \\left(b \\implies c\\right)",
        "originalExpressionPlainText": "(a->c)|(b->c)",
        "goalType": "expression",
        "goalExpressionStructureString": "(implic(and(a;b);c))",
        "goalExpressionTex": "\\left(a \\land b\\right) \\implies c",
        "goalExpressionPlainText": "(a&b)->c",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplic"
          }
        ],
        "stepsNumber": 5,
        "difficulty": 3.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__12_Simplification",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Simplification",
        "nameRu": "Упрощение",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "or",
          "implic",
          "not"
        ],
        "originalExpressionStructureString": "(and(or(a;b);implic(not(c);not(a));implic(not(d);not(b));not(or(c;d));not(or(not(c);not(d)))))",
        "originalExpressionTex": "\\left(a \\lor b\\right) \\land \\left( \\neg c \\implies  \\neg a\\right) \\land \\left( \\neg d \\implies  \\neg b\\right) \\land  \\neg \\left(c \\lor d\\right) \\land  \\neg \\left( \\neg c \\lor  \\neg d\\right)",
        "originalExpressionPlainText": "(a|b)&(!c->!a)&(!d->!b)&!(c|d)&!(!c|!d)",
        "goalType": "expression",
        "goalExpressionStructureString": "(0)",
        "goalExpressionTex": "0",
        "goalExpressionPlainText": "0",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplic"
          }
        ],
        "stepsNumber": 10,
        "difficulty": 4.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__13_SimplificationHard",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Simplification Hard",
        "nameRu": "Тяжелое упрощение",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "or",
          "implic",
          "not"
        ],
        "originalExpressionStructureString": "(and(or(a;b;c);implic(a;or(c;d));implic(c;or(b;d));not(b);not(d)))",
        "originalExpressionTex": "\\left(a \\lor b \\lor c\\right) \\land \\left(a \\implies \\left(c \\lor d\\right)\\right) \\land \\left(c \\implies \\left(b \\lor d\\right)\\right) \\land  \\neg b \\land  \\neg d",
        "originalExpressionPlainText": "(a|b|c)&(a->(c|d))&(c->(b|d))&!b&!d",
        "goalType": "expression",
        "goalExpressionStructureString": "(0)",
        "goalExpressionTex": "0",
        "goalExpressionPlainText": "0",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplic"
          }
        ],
        "stepsNumber": 20,
        "difficulty": 5.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__14_ExclusiveOrXOR",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Exclusive or (XOR)",
        "nameRu": "Исключающее или (XOR)",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "XOR, identity",
        "descriptionRu": "XOR, идентичность",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "xor",
          "or",
          "not"
        ],
        "originalExpressionStructureString": "(xor(or(xor(a;a);xor(b;xor(1;1)));1))",
        "originalExpressionTex": "\\left(\\left(a \\oplus a\\right) \\lor \\left(b \\oplus \\left(1 \\oplus 1\\right)\\right)\\right) \\oplus 1",
        "originalExpressionPlainText": "((a^a)|(b^(1^1)))^1",
        "goalType": "expression",
        "goalExpressionStructureString": "(not(b))",
        "goalExpressionTex": " \\neg b",
        "goalExpressionPlainText": "!b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXor"
          }
        ],
        "stepsNumber": 5,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__15_XORAbsorption",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "XOR Absorption",
        "nameRu": "XOR Поглощение",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Multiselection, identity",
        "descriptionRu": "Мультивыделение, идентичность",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "xor"
        ],
        "originalExpressionStructureString": "(xor(xor(a;b);b))",
        "originalExpressionTex": "\\left(a \\oplus b\\right) \\oplus b",
        "originalExpressionPlainText": "(a^b)^b",
        "goalType": "expression",
        "goalExpressionStructureString": "(a)",
        "goalExpressionTex": "a",
        "goalExpressionPlainText": "a",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXor"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__16_XORNegation",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "XOR Negation",
        "nameRu": "Отрицание XOR",
        "descriptionShortEn": "Knowing 'a⊕b = (¬a∧b)∨(a∧¬b)' relate to",
        "descriptionShortRu": "Зная 'a⊕b = (¬a∧b)∨(a∧¬b)' свести к",
        "descriptionEn": "Prove  '!(a^b) = !a^b'",
        "descriptionRu": "Доказать  '!(a^b) = !a^b'",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "not",
          "xor"
        ],
        "originalExpressionStructureString": "(not(xor(a;b)))",
        "originalExpressionTex": " \\neg \\left(a \\oplus b\\right)",
        "originalExpressionPlainText": "!(a^b)",
        "goalType": "expression",
        "goalExpressionStructureString": "(xor(not(a);b))",
        "goalExpressionTex": " \\neg a \\oplus b",
        "goalExpressionPlainText": "!a^b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXor"
          }
        ],
        "stepsNumber": 10,
        "difficulty": 4.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__17_XORConjunctionDefinition",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "XOR Conjunction Definition",
        "nameRu": "Конъюктивное определение XOR",
        "descriptionShortEn": "Knowing 'a⊕b = (¬a∧b)∨(a∧¬b)' relate to",
        "descriptionShortRu": "Зная 'a⊕b = (¬a∧b)∨(a∧¬b)' свести к",
        "descriptionEn": "Prove  '(!a|!b)&(a|b) = a^b'",
        "descriptionRu": "Доказать  '(!a|!b)&(a|b) = a^b'",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "or",
          "not",
          "xor"
        ],
        "originalExpressionStructureString": "(and(or(not(a);not(b));or(a;b)))",
        "originalExpressionTex": "\\left( \\neg a \\lor  \\neg b\\right) \\land \\left(a \\lor b\\right)",
        "originalExpressionPlainText": "(!a|!b)&(a|b)",
        "goalType": "expression",
        "goalExpressionStructureString": "(xor(a;b))",
        "goalExpressionTex": "a \\oplus b",
        "goalExpressionPlainText": "a^b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXor"
          }
        ],
        "stepsNumber": 10,
        "difficulty": 4.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__18_XORDistribution",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "XOR Distribution",
        "nameRu": "Дистрибутивность XOR",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "Prove  '(a&b)^(a&c) = a&(b^c)'",
        "descriptionRu": "Доказать  '(a&b)^(a&c) = a&(b^c)'",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "xor",
          "and"
        ],
        "originalExpressionStructureString": "(xor(and(a;b);and(a;c)))",
        "originalExpressionTex": "\\left(a \\land b\\right) \\oplus \\left(a \\land c\\right)",
        "originalExpressionPlainText": "(a&b)^(a&c)",
        "goalType": "expression",
        "goalExpressionStructureString": "(and(a;xor(b;c)))",
        "goalExpressionTex": "a \\land \\left(b \\oplus c\\right)",
        "goalExpressionPlainText": "a&(b^c)",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorConjunctionDef"
          }
        ],
        "stepsNumber": 10,
        "difficulty": 4.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__19_XOR2CNFDefinition",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "XOR 2-CNF Definition",
        "nameRu": "Определение XOR через 2-КНФ",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "or",
          "not",
          "xor"
        ],
        "originalExpressionStructureString": "(and(or(a;not(a));or(not(a);not(b));or(a;b);or(not(b);b)))",
        "originalExpressionTex": "\\left(a \\lor  \\neg a\\right) \\land \\left( \\neg a \\lor  \\neg b\\right) \\land \\left(a \\lor b\\right) \\land \\left( \\neg b \\lor b\\right)",
        "originalExpressionPlainText": "(a|!a)&(!a|!b)&(a|b)&(!b|b)",
        "goalType": "expression",
        "goalExpressionStructureString": "(xor(a;b))",
        "goalExpressionTex": "a \\oplus b",
        "goalExpressionPlainText": "a^b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorAdvanced"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__20_XOROfAndSimplification",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "XOR of And Simplification",
        "nameRu": "Упрощение XOR конъюнкции",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "xor",
          "and",
          "or"
        ],
        "originalExpressionStructureString": "(xor(xor(and(a;b);a);b))",
        "originalExpressionTex": "\\left(\\left(a \\land b\\right) \\oplus a\\right) \\oplus b",
        "originalExpressionPlainText": "((a&b)^a)^b",
        "goalType": "expression",
        "goalExpressionStructureString": "(or(a;b))",
        "goalExpressionTex": "a \\lor b",
        "goalExpressionPlainText": "a|b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorAdvanced"
          }
        ],
        "stepsNumber": 20,
        "difficulty": 5.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__21_ImplicationZhegalkinPolynom",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Implication Zhegalkin Polynom",
        "nameRu": "Импликация полином Жегалкина",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "xor",
          "and",
          "implic"
        ],
        "originalExpressionStructureString": "(xor(a;and(a;b);1))",
        "originalExpressionTex": "a \\oplus \\left(a \\land b\\right) \\oplus 1",
        "originalExpressionPlainText": "a^(a&b)^1",
        "goalType": "expression",
        "goalExpressionStructureString": "(implic(a;b))",
        "goalExpressionTex": "a \\implies b",
        "goalExpressionPlainText": "a->b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorAdvanced"
          }
        ],
        "stepsNumber": 20,
        "difficulty": 5.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__22_Equivalence",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Equivalence",
        "nameRu": "Эквиваленция",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "and",
          "not",
          "implic",
          "or",
          "alleq"
        ],
        "originalExpressionStructureString": "(and(not(implic(or(alleq(0;not(a));b);b));alleq(1;c)))",
        "originalExpressionTex": " \\neg \\left(\\left(\\left(0 \\equiv  \\neg a\\right) \\lor b\\right) \\implies b\\right) \\land \\left(1 \\equiv c\\right)",
        "originalExpressionPlainText": "!(((0==!a)|b)->b)&(1==c)",
        "goalType": "expression",
        "goalExpressionStructureString": "(and(a;not(b);c))",
        "goalExpressionTex": "a \\land  \\neg b \\land c",
        "goalExpressionPlainText": "a&!b&c",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorEquivalence"
          }
        ],
        "stepsNumber": 6,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__23_EquivalenceAndXor",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Equivalence and Xor",
        "nameRu": "Эквиваленция и Xor",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "not",
          "alleq",
          "xor"
        ],
        "originalExpressionStructureString": "(not(alleq(a;b)))",
        "originalExpressionTex": " \\neg \\left(a \\equiv b\\right)",
        "originalExpressionPlainText": "!(a==b)",
        "goalType": "expression",
        "goalExpressionStructureString": "(xor(a;b))",
        "goalExpressionTex": "a \\oplus b",
        "goalExpressionPlainText": "a^b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorEquivalence"
          }
        ],
        "stepsNumber": 10,
        "difficulty": 4.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__24_EquivalenceXorDistribution",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Equivalence Xor Distribution",
        "nameRu": "Дистрибутивность эквиваленции и Xor",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "xor",
          "alleq"
        ],
        "originalExpressionStructureString": "(xor(alleq(a;b);alleq(a;c)))",
        "originalExpressionTex": "\\left(a \\equiv b\\right) \\oplus \\left(a \\equiv c\\right)",
        "originalExpressionPlainText": "(a==b)^(a==c)",
        "goalType": "expression",
        "goalExpressionStructureString": "(xor(b;c))",
        "goalExpressionTex": "b \\oplus c",
        "goalExpressionPlainText": "b^c",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorEquivalenceAdvanced"
          }
        ],
        "stepsNumber": 3,
        "difficulty": 2.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__25_EquivalenceZhegalkinPolynom",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Equivalence Zhegalkin Polynom",
        "nameRu": "Эквиваленция полином Жегалкина",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "xor",
          "alleq"
        ],
        "originalExpressionStructureString": "(xor(a;b;1))",
        "originalExpressionTex": "a \\oplus b \\oplus 1",
        "originalExpressionPlainText": "a^b^1",
        "goalType": "expression",
        "goalExpressionStructureString": "(alleq(a;b))",
        "goalExpressionTex": "a \\equiv b",
        "goalExpressionPlainText": "a==b",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorEquivalenceAdvanced"
          }
        ],
        "stepsNumber": 20,
        "difficulty": 5.0
      },
      {
        "code": "global__SubstifyBooleanLogicGameTasks__26_SimplificationToCNF",
        "version": 0,
        "namespaceCode": "global",
        "nameEn": "Simplification to CNF",
        "nameRu": "Упрощение к КНФ",
        "descriptionShortEn": "Relate to",
        "descriptionShortRu": "Свести к",
        "descriptionEn": "No hints",
        "descriptionRu": "Без подсказок",
        "subjectType": "logic",
        "tags": [
          "Logic",
          "Proof",
          "or",
          "and",
          "not"
        ],
        "originalExpressionStructureString": "(or(and(not(A);or(not(B);C;not(D)));and(A;or(B;not(C);D));and(not(B);not(C));and(not(B);D);and(C;B);and(C;D);and(not(D);B);and(not(D);not(C))))",
        "originalExpressionTex": "\\left( \\neg A \\land \\left( \\neg B \\lor C \\lor  \\neg D\\right)\\right) \\lor \\left(A \\land \\left(B \\lor  \\neg C \\lor D\\right)\\right) \\lor \\left( \\neg B \\land  \\neg C\\right) \\lor \\left( \\neg B \\land D\\right) \\lor \\left(C \\land B\\right) \\lor \\left(C \\land D\\right) \\lor \\left( \\neg D \\land B\\right) \\lor \\left( \\neg D \\land  \\neg C\\right)",
        "originalExpressionPlainText": "(!A&(!B|C|!D))|(A&(B|!C|D))|(!B&!C)|(!B&D)|(C&B)|(C&D)|(!D&B)|(!D&!C)",
        "goalType": "expression",
        "goalExpressionStructureString": "(and(or(A;not(B);C;not(D));or(not(A);B;not(C);D)))",
        "goalExpressionTex": "\\left(A \\lor  \\neg B \\lor C \\lor  \\neg D\\right) \\land \\left( \\neg A \\lor B \\lor  \\neg C \\lor D\\right)",
        "goalExpressionPlainText": "(A|!B|C|!D)&(!A|B|!C|D)",
        "rulePacks": [
          {
            "namespaceCode": "global",
            "rulePackCode": "global__LogicAndOrNegImplicXorEquivalenceAdvanced"
          }
        ],
        "stepsNumber": 30,
        "difficulty": 7.0
      }
    ]
  },
  "rulePacks": [
    {
      "code": "global__LogicAndOrNeg",
      "version": 0,
      "namespaceCode": "global",
      "nameEn": "And Or Neg",
      "nameRu": "И или отрицание",
      "descriptionShortEn": "Basic operations, it's definitions and properties",
      "descriptionShortRu": "Основные операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание",
      "subjectType": "logic",
      "rules": [
        {
          "code": "(not(and(a;b)))__to__(or(not(a);not(b)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(and(a;b)))",
          "rightStructureString": "(or(not(a);not(b)))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(not(a);not(b)))__to__(not(and(a;b)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(or(not(a);not(b)))",
          "rightStructureString": "(not(and(a;b)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(or(a;b)))__to__(and(not(a);not(b)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(or(a;b)))",
          "rightStructureString": "(and(not(a);not(b)))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(not(a);not(b)))__to__(not(or(a;b)))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(and(not(a);not(b)))",
          "rightStructureString": "(not(or(a;b)))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(a;b))__to__(not(or(not(a);not(b))))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(and(a;b))",
          "rightStructureString": "(not(or(not(a);not(b))))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(or(not(a);not(b))))__to__(and(a;b))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(or(not(a);not(b))))",
          "rightStructureString": "(and(a;b))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(a;b))__to__(not(and(not(a);not(b))))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(or(a;b))",
          "rightStructureString": "(not(and(not(a);not(b))))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(and(not(a);not(b))))__to__(or(a;b))",
          "nameEn": "De Morgan Law",
          "nameRu": "Закон де Моргана",
          "leftStructureString": "(not(and(not(a);not(b))))",
          "rightStructureString": "(or(a;b))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(not(a)))__to__(a)",
          "leftStructureString": "(not(not(a)))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(not(not(a)))",
          "leftStructureString": "(a)",
          "rightStructureString": "(not(not(a)))",
          "priority": 89,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(a;a))__to__(a)",
          "leftStructureString": "(or(a;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(or(a;a))",
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;a))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(a;a))__to__(a)",
          "leftStructureString": "(and(a;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(and(a;a))",
          "leftStructureString": "(a)",
          "rightStructureString": "(and(a;a))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(a;b))__to__(and(b;a))",
          "leftStructureString": "(and(a;b))",
          "rightStructureString": "(and(b;a))",
          "priority": 40,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(a;b))__to__(or(b;a))",
          "leftStructureString": "(or(a;b))",
          "rightStructureString": "(or(b;a))",
          "priority": 40,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(and(a;1))",
          "leftStructureString": "(a)",
          "rightStructureString": "(and(a;1))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(or(a;0))",
          "leftStructureString": "(a)",
          "rightStructureString": "(or(a;0))",
          "priority": 90,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(a;not(a)))__to__(1)",
          "leftStructureString": "(or(a;not(a)))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(not(a);a))__to__(1)",
          "leftStructureString": "(or(not(a);a))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(a;not(a)))__to__(0)",
          "leftStructureString": "(and(a;not(a)))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(not(a);a))__to__(0)",
          "leftStructureString": "(and(not(a);a))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(a;1))__to__(1)",
          "leftStructureString": "(or(a;1))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(1;a))__to__(1)",
          "leftStructureString": "(or(1;a))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(a;1))__to__(a)",
          "leftStructureString": "(and(a;1))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(1;a))__to__(a)",
          "leftStructureString": "(and(1;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(a;0))__to__(a)",
          "leftStructureString": "(or(a;0))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(0;a))__to__(a)",
          "leftStructureString": "(or(0;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(a;0))__to__(0)",
          "leftStructureString": "(and(a;0))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(0;a))__to__(0)",
          "leftStructureString": "(and(0;a))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(0))__to__(1)",
          "leftStructureString": "(not(0))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(1))__to__(0)",
          "leftStructureString": "(not(1))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "SimpleComputation",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "ZeroComputation",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "ParentBracketsExpansion",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 30,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "ArgumentsSwap",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 40,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "ArgumentsPermutation",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 40,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "OpeningBrackets",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 30,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "ArgumentsPermutationInOriginalOrder",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 41,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "ReduceArithmetic",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "TwoSidesArithmeticReduce",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "SetComplicatingExtension",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 92,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        }
      ]
    },
    {
      "code": "global__LogicAndOrNegImplic",
      "version": 0,
      "namespaceCode": "global",
      "nameEn": "And Or Neg Implication",
      "nameRu": "И или отрицание импликация",
      "descriptionShortEn": "Basic operations, it's definitions and properties",
      "descriptionShortRu": "Основные операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "global",
          "rulePackCode": "global__LogicAndOrNeg"
        }
      ],
      "rules": [
        {
          "code": "(or(not(a);b))__to__(implic(a;b))",
          "leftStructureString": "(or(not(a);b))",
          "rightStructureString": "(implic(a;b))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(b;not(a)))__to__(implic(a;b))",
          "leftStructureString": "(or(b;not(a)))",
          "rightStructureString": "(implic(a;b))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(implic(a;b))__to__(or(not(a);b))",
          "leftStructureString": "(implic(a;b))",
          "rightStructureString": "(or(not(a);b))",
          "priority": 35,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(implic(0;a))__to__(1)",
          "leftStructureString": "(implic(0;a))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(implic(a;1))__to__(1)",
          "leftStructureString": "(implic(a;1))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(implic(a;0))__to__(not(a))",
          "leftStructureString": "(implic(a;0))",
          "rightStructureString": "(not(a))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(implic(1;a))__to__(a)",
          "leftStructureString": "(implic(1;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(implic(a;a))__to__(1)",
          "leftStructureString": "(implic(a;a))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(implic(1;a))",
          "leftStructureString": "(a)",
          "rightStructureString": "(implic(1;a))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "Implication",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        }
      ]
    },
    {
      "code": "global__LogicAndOrNegImplicXor",
      "version": 0,
      "namespaceCode": "global",
      "nameEn": "And Or Neg Implication Xor",
      "nameRu": "И или отрицание импликация Xor",
      "descriptionShortEn": "Basic operations, it's definitions and properties",
      "descriptionShortRu": "Основные операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "global",
          "rulePackCode": "global__LogicAndOrNegImplic"
        }
      ],
      "rules": [
        {
          "code": "(xor(a;b))__to__(or(and(not(a);b);and(a;not(b))))",
          "leftStructureString": "(xor(a;b))",
          "rightStructureString": "(or(and(not(a);b);and(a;not(b))))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(and(not(a);b);and(a;not(b))))__to__(xor(a;b))",
          "leftStructureString": "(or(and(not(a);b);and(a;not(b))))",
          "rightStructureString": "(xor(a;b))",
          "priority": 5,
          "isExtending": true,
          "matchJumbledAndNested": true,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(a;0))__to__(a)",
          "leftStructureString": "(xor(a;0))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(a;1))__to__(not(a))",
          "leftStructureString": "(xor(a;1))",
          "rightStructureString": "(not(a))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(0;a))__to__(a)",
          "leftStructureString": "(xor(0;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(1;a))__to__(not(a))",
          "leftStructureString": "(xor(1;a))",
          "rightStructureString": "(not(a))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(xor(a;0))",
          "leftStructureString": "(a)",
          "rightStructureString": "(xor(a;0))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(a))__to__(xor(a;1))",
          "leftStructureString": "(not(a))",
          "rightStructureString": "(xor(a;1))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(a;a))__to__(0)",
          "leftStructureString": "(xor(a;a))",
          "rightStructureString": "(0)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "Xor",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 92,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        }
      ]
    },
    {
      "code": "global__LogicAndOrNegImplicXorConjunctionDef",
      "version": 0,
      "namespaceCode": "global",
      "nameEn": "And Or Neg Implication Xor Conjunction Definition",
      "nameRu": "И или отрицание импликация Xor конъюктивное определене",
      "descriptionShortEn": "Operations, it's definitions and properties",
      "descriptionShortRu": "Операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "global",
          "rulePackCode": "global__LogicAndOrNegImplicXor"
        }
      ],
      "rules": [
        {
          "code": "(xor(a;b))__to__(and(or(not(a);not(b));or(a;b)))",
          "leftStructureString": "(xor(a;b))",
          "rightStructureString": "(and(or(not(a);not(b));or(a;b)))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(or(not(a);not(b));or(a;b)))__to__(xor(a;b))",
          "leftStructureString": "(and(or(not(a);not(b));or(a;b)))",
          "rightStructureString": "(xor(a;b))",
          "priority": 5,
          "isExtending": true,
          "matchJumbledAndNested": true,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(xor(a;b)))__to__(xor(not(a);b))",
          "leftStructureString": "(not(xor(a;b)))",
          "rightStructureString": "(xor(not(a);b))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(not(a);b))__to__(not(xor(a;b)))",
          "leftStructureString": "(xor(not(a);b))",
          "rightStructureString": "(not(xor(a;b)))",
          "priority": 15,
          "isExtending": false,
          "matchJumbledAndNested": true,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(not(a);not(b)))__to__(xor(a;b))",
          "leftStructureString": "(xor(not(a);not(b)))",
          "rightStructureString": "(xor(a;b))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(a;b))__to__(xor(not(a);not(b)))",
          "leftStructureString": "(xor(a;b))",
          "rightStructureString": "(xor(not(a);not(b)))",
          "priority": 20,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        }
      ]
    },
    {
      "code": "global__LogicAndOrNegImplicXorAdvanced",
      "version": 0,
      "namespaceCode": "global",
      "nameEn": "And Or Neg Implication Xor plus",
      "nameRu": "И или отрицание импликация Xor плюс",
      "descriptionShortEn": "Operations, it's definitions and properties",
      "descriptionShortRu": "Операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "global",
          "rulePackCode": "global__LogicAndOrNegImplicXorConjunctionDef"
        }
      ],
      "rules": [
        {
          "code": "XorDistribution",
          "leftStructureString": "",
          "rightStructureString": "",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        }
      ]
    },
    {
      "code": "global__LogicAndOrNegImplicXorEquivalence",
      "version": 0,
      "namespaceCode": "global",
      "nameEn": "And Or Neg Implication Xor Equivalence",
      "nameRu": "И или отрицание импликация Xor эквиваленция",
      "descriptionShortEn": "Operations, it's definitions and properties",
      "descriptionShortRu": "Операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквиваленция",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "global",
          "rulePackCode": "global__LogicAndOrNegImplicXorAdvanced"
        }
      ],
      "rules": [
        {
          "code": "(alleq(a;b))__to__(or(and(a;b);and(not(a);not(b))))",
          "leftStructureString": "(alleq(a;b))",
          "rightStructureString": "(or(and(a;b);and(not(a);not(b))))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(or(and(a;b);and(not(a);not(b))))__to__(alleq(a;b))",
          "leftStructureString": "(or(and(a;b);and(not(a);not(b))))",
          "rightStructureString": "(alleq(a;b))",
          "priority": 5,
          "isExtending": true,
          "matchJumbledAndNested": true,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(a;b))__to__(and(or(not(a);b);or(a;not(b))))",
          "leftStructureString": "(alleq(a;b))",
          "rightStructureString": "(and(or(not(a);b);or(a;not(b))))",
          "priority": 30,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(and(or(not(a);b);or(a;not(b))))__to__(alleq(a;b))",
          "leftStructureString": "(and(or(not(a);b);or(a;not(b))))",
          "rightStructureString": "(alleq(a;b))",
          "priority": 5,
          "isExtending": true,
          "matchJumbledAndNested": true,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(0;a))__to__(not(a))",
          "leftStructureString": "(alleq(0;a))",
          "rightStructureString": "(not(a))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(a;1))__to__(a)",
          "leftStructureString": "(alleq(a;1))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(a;0))__to__(not(a))",
          "leftStructureString": "(alleq(a;0))",
          "rightStructureString": "(not(a))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(1;a))__to__(a)",
          "leftStructureString": "(alleq(1;a))",
          "rightStructureString": "(a)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(a)__to__(alleq(1;a))",
          "leftStructureString": "(a)",
          "rightStructureString": "(alleq(1;a))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(a))__to__(alleq(0;a))",
          "leftStructureString": "(not(a))",
          "rightStructureString": "(alleq(0;a))",
          "priority": 91,
          "isExtending": true,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(a;a))__to__(1)",
          "leftStructureString": "(alleq(a;a))",
          "rightStructureString": "(1)",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        }
      ]
    },
    {
      "code": "global__LogicAndOrNegImplicXorEquivalenceAdvanced",
      "version": 0,
      "namespaceCode": "global",
      "nameEn": "And Or Neg Implication Xor Equivalence plus",
      "nameRu": "И или отрицание импликация Xor эквиваленция плюс",
      "descriptionShortEn": "Operations, it's definitions and properties",
      "descriptionShortRu": "Операции, их определения и свойства",
      "descriptionEn": "Boolean Algebra Conjunction, Disjunction, Negation, Implication, Exclusive Or, Equivalence",
      "descriptionRu": "Булева алгебра: конъюнкция, дизъюнкция, отрицание, импликация, исключающее или, эквиваленция",
      "subjectType": "logic",
      "rulePacks": [
        {
          "namespaceCode": "global",
          "rulePackCode": "global__LogicAndOrNegImplicXorEquivalence"
        }
      ],
      "rules": [
        {
          "code": "(xor(a;b))__to__(not(alleq(a;b)))",
          "leftStructureString": "(xor(a;b))",
          "rightStructureString": "(not(alleq(a;b)))",
          "priority": 90,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(a;b))__to__(not(xor(a;b)))",
          "leftStructureString": "(alleq(a;b))",
          "rightStructureString": "(not(xor(a;b)))",
          "priority": 90,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(alleq(a;b)))__to__(xor(a;b))",
          "leftStructureString": "(not(alleq(a;b)))",
          "rightStructureString": "(xor(a;b))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(not(xor(a;b)))__to__(alleq(a;b))",
          "leftStructureString": "(not(xor(a;b)))",
          "rightStructureString": "(alleq(a;b))",
          "priority": 5,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(not(a);b))__to__(alleq(a;b))",
          "leftStructureString": "(xor(not(a);b))",
          "rightStructureString": "(alleq(a;b))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(a;b))__to__(xor(not(a);b))",
          "leftStructureString": "(alleq(a;b))",
          "rightStructureString": "(xor(not(a);b))",
          "priority": 90,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(alleq(not(a);b))__to__(xor(a;b))",
          "leftStructureString": "(alleq(not(a);b))",
          "rightStructureString": "(xor(a;b))",
          "priority": 10,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        },
        {
          "code": "(xor(a;b))__to__(alleq(not(a);b))",
          "leftStructureString": "(xor(a;b))",
          "rightStructureString": "(alleq(not(a);b))",
          "priority": 90,
          "isExtending": false,
          "matchJumbledAndNested": false,
          "simpleAdditional": false,
          "basedOnTaskContext": false,
          "difficultyInTaskAutoGeneration": 1.0,
          "weightInTaskAutoGeneration": 1.0,
          "useWhenPostprocessGeneratedExpression": false,
          "tagsForTaskGenerator": []
        }
      ]
    }
  ]
}