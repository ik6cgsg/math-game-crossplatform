{
    "rulePacks": [
        {
            "namespaceCode": "global",
            "code": "global__AdvancedTrigonometry",
            "version": 0,
            "nameEn": "Advanced Trigonometry",
            "nameRu": "Продвинутая тригонометрия",
            "descriptionShortEn": "With Tg Ctg of Sum and πk reduction",
            "descriptionShortRu": "С tg ctg сумммы и πk упрощением",
            "descriptionEn": "",
            "descriptionRu": "",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__Trigonometry",
                    "rulePackNameEn": "Trigonometry",
                    "rulePackNameRu": "Тригонометрия"
                }
            ],
            "rules": [
                {
                    "code": "(sin(*(2;a)))__to__(/(*(2;tg(a));+(1;^(tg(a);2))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(*(2;a)))",
                    "rightStructureString": "(/(*(2;tg(a));+(1;^(tg(a);2))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(2;tg(a));+(1;^(tg(a);2))))__to__(sin(*(2;a)))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(2;tg(a));+(1;^(tg(a);2))))",
                    "rightStructureString": "(sin(*(2;a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(*(2;a)))__to__(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(*(2;a)))",
                    "rightStructureString": "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))__to__(cos(*(2;a)))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(1;-(^(tg(a);2)));+(1;^(tg(a);2))))",
                    "rightStructureString": "(cos(*(2;a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(tg(+(a;b)))__to__(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(+(a;b)))",
                    "rightStructureString": "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))__to__(tg(+(a;b)))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(tg(a);tg(b));+(1;-(*(tg(a);tg(b))))))",
                    "rightStructureString": "(tg(+(a;b)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(tg(+(a;-(b))))__to__(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(+(a;-(b))))",
                    "rightStructureString": "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))__to__(tg(+(a;-(b))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(tg(a);-(tg(b)));+(1;*(tg(a);tg(b)))))",
                    "rightStructureString": "(tg(+(a;-(b))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(ctg(+(a;b)))__to__(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(+(a;b)))",
                    "rightStructureString": "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))__to__(ctg(+(a;b)))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(*(ctg(a);ctg(b));-(1));+(ctg(a);ctg(b))))",
                    "rightStructureString": "(ctg(+(a;b)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(ctg(+(a;-(b))))__to__(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(+(a;-(b))))",
                    "rightStructureString": "(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))__to__(ctg(+(a;-(b))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(*(ctg(a);ctg(b));1);+(ctg(b);-(ctg(a)))))",
                    "rightStructureString": "(ctg(+(a;-(b))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(tg(*(2;a)))__to__(/(*(2;tg(a));+(1;-(^(tg(a);2)))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(*(2;a)))",
                    "rightStructureString": "(/(*(2;tg(a));+(1;-(^(tg(a);2)))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(2;tg(a));+(1;-(^(tg(a);2)))))__to__(tg(*(2;a)))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(2;tg(a));+(1;-(^(tg(a);2)))))",
                    "rightStructureString": "(tg(*(2;a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(ctg(*(2;a)))__to__(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(*(2;a)))",
                    "rightStructureString": "(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))__to__(ctg(*(2;a)))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+((^(ctg(a);2));-(1));*(2;ctg(a))))",
                    "rightStructureString": "(ctg(*(2;a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(a;*(2;π;k))))__to__(sin(a))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(a;*(2;π;k))))",
                    "rightStructureString": "(sin(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(+(a;*(2;π;k))))__to__(cos(a))",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;*(2;π;k))))",
                    "rightStructureString": "(cos(a))",
                    "matchJumbledAndNested": false
                }
            ],
            "serverActionTs": "2021-10-03T16:51:29.779+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__Trigonometry",
            "version": 0,
            "nameEn": "Trigonometry",
            "nameRu": "Тригонометрия",
            "descriptionShortEn": "Basic properties without Tg Ctg of sum and πk",
            "descriptionShortRu": "Основные свойства без tg ctg сумммы и πk",
            "descriptionEn": "",
            "descriptionRu": "",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__TrigonometrySinCosSumReduction",
                    "rulePackNameEn": "Trigonometry Sin Cos of Sum and it\u0027s Reduction",
                    "rulePackNameRu": "Тригонометрия sin cos суммы и их приведение"
                }
            ],
            "rules": [
                {
                    "code": "(sin(*(2;a)))__to__(*(2;sin(a);cos(a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(*(2;a)))",
                    "rightStructureString": "(*(2;sin(a);cos(a)))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(*(2;sin(a);cos(a)))__to__(sin(*(2;a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(2;sin(a);cos(a)))",
                    "rightStructureString": "(sin(*(2;a)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(*(2;a)))__to__(+(^(cos(a);2);-(^(sin(a);2))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(*(2;a)))",
                    "rightStructureString": "(+(^(cos(a);2);-(^(sin(a);2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(cos(a);2);-(^(sin(a);2))))__to__(cos(*(2;a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(cos(a);2);-(^(sin(a);2))))",
                    "rightStructureString": "(cos(*(2;a)))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(+(-(^(sin(a);2));^(cos(a);2)))__to__(cos(*(2;a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(^(sin(a);2));^(cos(a);2)))",
                    "rightStructureString": "(cos(*(2;a)))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(cos(*(2;a)))__to__(+(1;-(*(2;^(sin(a);2)))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(*(2;a)))",
                    "rightStructureString": "(+(1;-(*(2;^(sin(a);2)))))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(+(1;-(*(2;^(sin(a);2)))))__to__(cos(*(2;a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(1;-(*(2;^(sin(a);2)))))",
                    "rightStructureString": "(cos(*(2;a)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(-(*(2;^(sin(a);2)));1))__to__(cos(*(2;a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(*(2;^(sin(a);2)));1))",
                    "rightStructureString": "(cos(*(2;a)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(*(2;a)))__to__(+(*(2;^(cos(a);2));-(1)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(*(2;a)))",
                    "rightStructureString": "(+(*(2;^(cos(a);2));-(1)))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(+(*(2;^(cos(a);2));-(1)))__to__(cos(*(2;a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(*(2;^(cos(a);2));-(1)))",
                    "rightStructureString": "(cos(*(2;a)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(-(1);*(2;^(cos(a);2))))__to__(cos(*(2;a)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(1);*(2;^(cos(a);2))))",
                    "rightStructureString": "(cos(*(2;a)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(sin(a);sin(b)))__to__(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))",
                    "priority": 23,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(sin(a);sin(b)))",
                    "rightStructureString": "(*(2;sin(/(+(a;b);2));cos(/(+(a;-(b));2))))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(+(sin(a);-(sin(b))))__to__(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))",
                    "priority": 23,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(sin(a);-(sin(b))))",
                    "rightStructureString": "(*(2;sin(/(+(a;-(b));2));cos(/(+(a;b);2))))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(+(cos(a);cos(b)))__to__(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))",
                    "priority": 23,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(cos(a);cos(b)))",
                    "rightStructureString": "(*(2;cos(/(+(a;b);2));cos(/(+(a;-(b));2))))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(+(cos(a);-(cos(b))))__to__(+(-(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))))",
                    "priority": 23,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(cos(a);-(cos(b))))",
                    "rightStructureString": "(+(-(*(2;sin(/(+(a;-(b));2));sin(/(+(a;b);2))))))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(*(sin(a);sin(b)))__to__(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))",
                    "priority": 23,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(sin(a);sin(b)))",
                    "rightStructureString": "(/(+(cos(+(a;-(b)));-(cos(+(a;b))));2))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(*(sin(a);cos(b)))__to__(/(+(sin(+(a;-(b)));sin(+(a;b)));2))",
                    "priority": 23,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(sin(a);cos(b)))",
                    "rightStructureString": "(/(+(sin(+(a;-(b)));sin(+(a;b)));2))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                },
                {
                    "code": "(*(cos(a);cos(b)))__to__(/(+(cos(+(a;-(b)));cos(+(a;b)));2))",
                    "priority": 23,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(cos(a);cos(b)))",
                    "rightStructureString": "(/(+(cos(+(a;-(b)));cos(+(a;b)));2))",
                    "matchJumbledAndNested": true,
                    "weightInTaskAutoGeneration": 100.0
                }
            ],
            "serverActionTs": "2021-10-03T16:51:29.333+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__TrigonometrySinCosSumReduction",
            "version": 0,
            "nameEn": "Trigonometry Sin Cos of Sum and it\u0027s Reduction",
            "nameRu": "Тригонометрия sin cos суммы и их приведение",
            "descriptionShortEn": "Sin Cos of sum and difference; reduction Formulas",
            "descriptionShortRu": "Sin cos суммы и разности; их формулы приведения",
            "descriptionEn": "Placed in separated rule pack for tasks for Derivation of formulas on Sin Cos of Double Argument, also it\u0027s Sum, Difference and Product",
            "descriptionRu": "Вынесены в отдельный пакет правил для задач вывод формул на sin cos двойного аргумента, а также их сумму, разность и произведение",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__BasicTrigonometricDefinitionsIdentity",
                    "rulePackNameEn": "Basic Trigonometric Identity",
                    "rulePackNameRu": "Основное тригонометрическое тождество"
                }
            ],
            "rules": [
                {
                    "code": "(sin(+(a;b)))__to__(+(*(sin(a);cos(b));*(sin(b);cos(a))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(a;b)))",
                    "rightStructureString": "(+(*(sin(a);cos(b));*(sin(b);cos(a))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(*(sin(a);cos(b));*(sin(b);cos(a))))__to__(sin(+(a;b)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(*(sin(a);cos(b));*(sin(b);cos(a))))",
                    "rightStructureString": "(sin(+(a;b)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(+(a;-(b))))__to__(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(a;-(b))))",
                    "rightStructureString": "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))__to__(sin(+(a;-(b))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(*(sin(a);cos(b));-(*(sin(b);cos(a)))))",
                    "rightStructureString": "(sin(+(a;-(b))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(+(a;b)))__to__(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;b)))",
                    "rightStructureString": "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))__to__(cos(+(a;b)))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(*(cos(a);cos(b));-(*(sin(b);sin(a)))))",
                    "rightStructureString": "(cos(+(a;b)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(+(a;-(b))))__to__(+(*(cos(a);cos(b));*(sin(b);sin(a))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;-(b))))",
                    "rightStructureString": "(+(*(cos(a);cos(b));*(sin(b);sin(a))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(*(cos(a);cos(b));*(sin(b);sin(a))))__to__(cos(+(a;-(b))))",
                    "priority": 24,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(*(cos(a);cos(b));*(sin(b);sin(a))))",
                    "rightStructureString": "(cos(+(a;-(b))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(+(-(a))))__to__(+(-(sin(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(-(a))))",
                    "rightStructureString": "(+(-(sin(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(sin(a))))__to__(sin(+(-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(sin(a))))",
                    "rightStructureString": "(sin(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(sin(a)))__to__(sin(+(-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(sin(a)))",
                    "rightStructureString": "(sin(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(-(a)))__to__(+(-(sin(a))))",
                    "priority": 17,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(-(a)))",
                    "rightStructureString": "(+(-(sin(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(+(-(a))))__to__(cos(a))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(-(a))))",
                    "rightStructureString": "(cos(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(a))__to__(cos(+(-(a))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(cos(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(+(π;a)))__to__(+(-(cos(-(a)))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(π;a)))",
                    "rightStructureString": "(+(-(cos(-(a)))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(+(π;-(a))))__to__(+(-(cos(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(π;-(a))))",
                    "rightStructureString": "(+(-(cos(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(cos(a))))__to__(cos(+(π;-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(cos(a))))",
                    "rightStructureString": "(cos(+(π;-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(cos(a)))__to__(cos(+(π;-(a))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(cos(a)))",
                    "rightStructureString": "(cos(+(π;-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(π;a)))__to__(sin(+(-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(π;a)))",
                    "rightStructureString": "(sin(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(π;-(a))))__to__(sin(a))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(π;-(a))))",
                    "rightStructureString": "(sin(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(a))__to__(sin(+(π;-(a))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(a))",
                    "rightStructureString": "(sin(+(π;-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(/(π;2);-(a))))__to__(cos(a))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(/(π;2);-(a))))",
                    "rightStructureString": "(cos(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(/(π;2);a)))__to__(cos(+(-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(/(π;2);a)))",
                    "rightStructureString": "(cos(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(a))__to__(sin(+(/(π;2);-(a))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(sin(+(/(π;2);-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(+(/(π;2);-(a))))__to__(sin(a))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(/(π;2);-(a))))",
                    "rightStructureString": "(sin(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(+(/(π;2);a)))__to__(sin(+(-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(/(π;2);a)))",
                    "rightStructureString": "(sin(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(a))__to__(cos(+(/(π;2);-(a))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(a))",
                    "rightStructureString": "(cos(+(/(π;2);-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(-(a))))__to__(+(-(sin(a))))",
                    "priority": 17,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(-(a))))",
                    "rightStructureString": "(+(-(sin(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(b;-(a))))__to__(+(-(sin(+(a;-(b))))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(b;-(a))))",
                    "rightStructureString": "(+(-(sin(+(a;-(b))))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(sin(+(a;-(b))))))__to__(sin(+(b;-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(sin(+(a;-(b))))))",
                    "rightStructureString": "(sin(+(b;-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(-(a)))__to__(cos(a))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(-(a)))",
                    "rightStructureString": "(cos(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(a))__to__(cos(+(-(a))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(cos(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(+(a;-(b))))__to__(cos(+(b;-(a))))",
                    "priority": 14,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;-(b))))",
                    "rightStructureString": "(cos(+(b;-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(a))__to__(+(-(sin(+(a;π)))))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(a))",
                    "rightStructureString": "(+(-(sin(+(a;π)))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(a))__to__(+(-(sin(+(a;-(π))))))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(a))",
                    "rightStructureString": "(+(-(sin(+(a;-(π))))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(a))__to__(+(-(cos(+(a;π)))))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(+(-(cos(+(a;π)))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(a))__to__(+(-(cos(+(a;-(π))))))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(+(-(cos(+(a;-(π))))))",
                    "matchJumbledAndNested": false
                }
            ],
            "serverActionTs": "2021-10-03T16:51:28.849+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__BasicTrigonometricDefinitionsIdentity",
            "version": 0,
            "nameEn": "Basic Trigonometric Identity",
            "nameRu": "Основное тригонометрическое тождество",
            "descriptionShortEn": "Sin, Cos, Tg, Ctg Definitions and Basic Identity",
            "descriptionShortRu": "Определения sin, cos, tg, ctg и основное тождество",
            "descriptionEn": "",
            "descriptionRu": "",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__ShortMultiplication",
                    "rulePackNameEn": "Short Multiplication",
                    "rulePackNameRu": "Сокращенное умножение"
                }
            ],
            "rules": [
                {
                    "code": "(+(^(sin(a);2);^(cos(a);2)))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(sin(a);2);^(cos(a);2)))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(1;-(^(sin(a);2))))__to__(^(cos(a);2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(1;-(^(sin(a);2))))",
                    "rightStructureString": "(^(cos(a);2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(cos(a);2))__to__(+(1;-(^(sin(a);2))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(cos(a);2))",
                    "rightStructureString": "(+(1;-(^(sin(a);2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(a))__to__(^(+(1;-(^(sin(a);2)));0.5))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(^(+(1;-(^(sin(a);2)));0.5))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(1;-(^(cos(a);2))))__to__(^(sin(a);2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(1;-(^(cos(a);2))))",
                    "rightStructureString": "(^(sin(a);2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(sin(a);2))__to__(+(1;-(^(cos(a);2))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(sin(a);2))",
                    "rightStructureString": "(+(1;-(^(cos(a);2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(a))__to__(^(+(1;-(^(cos(a);2)));0.5))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(a))",
                    "rightStructureString": "(^(+(1;-(^(cos(a);2)));0.5))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(/(1;^(cos(a);2)))__to__(+(1;^(tg(a);2)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;^(cos(a);2)))",
                    "rightStructureString": "(+(1;^(tg(a);2)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(1;^(tg(a);2)))__to__(/(1;^(cos(a);2)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(1;^(tg(a);2)))",
                    "rightStructureString": "(/(1;^(cos(a);2)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(/(1;^(sin(a);2)))__to__(+(1;^(ctg(a);2)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;^(sin(a);2)))",
                    "rightStructureString": "(+(1;^(ctg(a);2)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(1;^(ctg(a);2)))__to__(/(1;^(sin(a);2)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(1;^(ctg(a);2)))",
                    "rightStructureString": "(/(1;^(sin(a);2)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(/(1;+(1;^(tg(a);2))))__to__(^(cos(a);2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;+(1;^(tg(a);2))))",
                    "rightStructureString": "(^(cos(a);2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(cos(a);2))__to__(/(1;+(1;^(tg(a);2))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(cos(a);2))",
                    "rightStructureString": "(/(1;+(1;^(tg(a);2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(/(1;+(1;^(ctg(a);2))))__to__(^(sin(a);2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;+(1;^(ctg(a);2))))",
                    "rightStructureString": "(^(sin(a);2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(sin(a);2))__to__(/(1;+(1;^(ctg(a);2))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(sin(a);2))",
                    "rightStructureString": "(/(1;+(1;^(ctg(a);2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(*(tg(a);ctg(a)))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(tg(a);ctg(a)))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(/(sin(a);cos(a)))__to__(tg(a))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(sin(a);cos(a)))",
                    "rightStructureString": "(tg(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(tg(a))__to__(/(sin(a);cos(a)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(a))",
                    "rightStructureString": "(/(sin(a);cos(a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(cos(a);sin(a)))__to__(ctg(a))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(cos(a);sin(a)))",
                    "rightStructureString": "(ctg(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(ctg(a))__to__(/(cos(a);sin(a)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(a))",
                    "rightStructureString": "(/(cos(a);sin(a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(1;ctg(a)))__to__(tg(a))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;ctg(a)))",
                    "rightStructureString": "(tg(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(tg(a))__to__(/(1;ctg(a)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(a))",
                    "rightStructureString": "(/(1;ctg(a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(1;tg(a)))__to__(ctg(a))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;tg(a)))",
                    "rightStructureString": "(ctg(a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(ctg(a))__to__(/(1;tg(a)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(a))",
                    "rightStructureString": "(/(1;tg(a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(0))__to__(0)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(0))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0)__to__(sin(0))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0)",
                    "rightStructureString": "(sin(0))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(π))__to__(0)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(π))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(*(2;π)))__to__(0)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(*(2;π)))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(0)__to__(sin(π))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0)",
                    "rightStructureString": "(sin(π))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(/(π;2)))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(/(π;2)))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(1)__to__(sin(/(π;2)))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(1)",
                    "rightStructureString": "(sin(/(π;2)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(0))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(0))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(1)__to__(cos(0))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(1)",
                    "rightStructureString": "(cos(0))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(π))__to__(+(-(1)))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(π))",
                    "rightStructureString": "(+(-(1)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(*(2;π)))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(*(2;π)))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(-(1)))__to__(cos(π))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(1)))",
                    "rightStructureString": "(cos(π))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(1))__to__(cos(π))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(1))",
                    "rightStructureString": "(cos(π))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(/(π;2)))__to__(0)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(/(π;2)))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0)__to__(cos(/(π;2)))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0)",
                    "rightStructureString": "(cos(/(π;2)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(/(π;6)))__to__(/(1;2))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(/(π;6)))",
                    "rightStructureString": "(/(1;2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0.5)__to__(sin(/(π;6)))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0.5)",
                    "rightStructureString": "(sin(/(π;6)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(/(π;4)))__to__(/(^(2;/(1;2));2))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(/(π;4)))",
                    "rightStructureString": "(/(^(2;/(1;2));2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(^(2;0.5);2))__to__(sin(/(π;4)))",
                    "priority": 13,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(^(2;0.5);2))",
                    "rightStructureString": "(sin(/(π;4)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(/(π;3)))__to__(/(^(3;/(1;2));2))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(/(π;3)))",
                    "rightStructureString": "(/(^(3;/(1;2));2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(^(3;0.5);2))__to__(sin(/(π;3)))",
                    "priority": 13,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(^(3;0.5);2))",
                    "rightStructureString": "(sin(/(π;3)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(/(π;3)))__to__(/(1;2))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(/(π;3)))",
                    "rightStructureString": "(/(1;2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0.5)__to__(cos(/(π;3)))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0.5)",
                    "rightStructureString": "(cos(/(π;3)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(/(π;4)))__to__(/(^(2;/(1;2));2))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(/(π;4)))",
                    "rightStructureString": "(/(^(2;/(1;2));2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(^(2;0.5);2))__to__(cos(/(π;4)))",
                    "priority": 13,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(^(2;0.5);2))",
                    "rightStructureString": "(cos(/(π;4)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(cos(/(π;6)))__to__(/(^(3;/(1;2));2))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(/(π;6)))",
                    "rightStructureString": "(/(^(3;/(1;2));2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(^(3;0.5);2))__to__(cos(/(π;6)))",
                    "priority": 13,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(^(3;0.5);2))",
                    "rightStructureString": "(cos(/(π;6)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(tg(/(π;4)))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(/(π;4)))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(1)__to__(tg(/(π;4)))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(1)",
                    "rightStructureString": "(tg(/(π;4)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(ctg(/(π;4)))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(/(π;4)))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(1)__to__(ctg(/(π;4)))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(1)",
                    "rightStructureString": "(ctg(/(π;4)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(tg(0))__to__(0)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(0))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0)__to__(tg(0))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0)",
                    "rightStructureString": "(tg(0))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(ctg(/(π;2)))__to__(0)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(/(π;2)))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0)__to__(ctg(/(π;2)))",
                    "priority": 89,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0)",
                    "rightStructureString": "(ctg(/(π;2)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(sin(+(a;*(2;π))))__to__(sin(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(a;*(2;π))))",
                    "rightStructureString": "(sin(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(+(a;-(*(2;π)))))__to__(sin(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(a;-(*(2;π)))))",
                    "rightStructureString": "(sin(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(a))__to__(sin(+(a;*(2;π))))",
                    "priority": 80,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(a))",
                    "rightStructureString": "(sin(+(a;*(2;π))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(+(a;*(2;π))))__to__(cos(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;*(2;π))))",
                    "rightStructureString": "(cos(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(+(a;-(*(2;π)))))__to__(cos(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;-(*(2;π)))))",
                    "rightStructureString": "(cos(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(a))__to__(cos(+(a;*(2;π))))",
                    "priority": 80,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(cos(+(a;*(2;π))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(tg(+(a;*(2;π))))__to__(tg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(+(a;*(2;π))))",
                    "rightStructureString": "(tg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(tg(+(a;-(*(2;π)))))__to__(tg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(+(a;-(*(2;π)))))",
                    "rightStructureString": "(tg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(tg(a))__to__(tg(+(a;*(2;π))))",
                    "priority": 80,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(a))",
                    "rightStructureString": "(tg(+(a;*(2;π))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(ctg(+(a;*(2;π))))__to__(ctg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(+(a;*(2;π))))",
                    "rightStructureString": "(ctg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(ctg(+(a;-(*(2;π)))))__to__(ctg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(+(a;-(*(2;π)))))",
                    "rightStructureString": "(ctg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(ctg(a))__to__(ctg(+(a;*(2;π))))",
                    "priority": 80,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(a))",
                    "rightStructureString": "(ctg(+(a;*(2;π))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(+(a;π)))__to__(+(-(sin(a))))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(a;π)))",
                    "rightStructureString": "(+(-(sin(a))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(+(a;-(π))))__to__(+(-(sin(a))))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(+(a;-(π))))",
                    "rightStructureString": "(+(-(sin(a))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(sin(a))__to__(+(-(sin(+(a;π)))))",
                    "priority": 85,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(sin(a))",
                    "rightStructureString": "(+(-(sin(+(a;π)))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(-(sin(a))))__to__(sin(+(a;π)))",
                    "priority": 80,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(sin(a))))",
                    "rightStructureString": "(sin(+(a;π)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(+(a;π)))__to__(+(-(cos(a))))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;π)))",
                    "rightStructureString": "(+(-(cos(a))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(+(a;-(π))))__to__(+(-(cos(a))))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(+(a;-(π))))",
                    "rightStructureString": "(+(-(cos(a))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(cos(a))__to__(+(-(cos(+(a;π)))))",
                    "priority": 85,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(cos(a))",
                    "rightStructureString": "(+(-(cos(+(a;π)))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(-(cos(a))))__to__(cos(+(a;π)))",
                    "priority": 80,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(cos(a))))",
                    "rightStructureString": "(cos(+(a;π)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(tg(+(a;π)))__to__(tg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(+(a;π)))",
                    "rightStructureString": "(tg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(tg(+(a;-(π))))__to__(tg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(+(a;-(π))))",
                    "rightStructureString": "(tg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(tg(a))__to__(tg(+(a;π)))",
                    "priority": 85,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(tg(a))",
                    "rightStructureString": "(tg(+(a;π)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(ctg(+(a;π)))__to__(ctg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(+(a;π)))",
                    "rightStructureString": "(ctg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(ctg(+(a;-(π))))__to__(ctg(a))",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(+(a;-(π))))",
                    "rightStructureString": "(ctg(a))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(ctg(a))__to__(ctg(+(a;π)))",
                    "priority": 85,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(ctg(a))",
                    "rightStructureString": "(ctg(+(a;π)))",
                    "matchJumbledAndNested": true
                }
            ],
            "serverActionTs": "2021-10-03T16:51:28.246+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__ShortMultiplication",
            "version": 0,
            "nameEn": "Short Multiplication",
            "nameRu": "Сокращенное умножение",
            "descriptionShortEn": "Short Multiplication Formulas",
            "descriptionShortRu": "Формулы сокращенного умножения",
            "descriptionEn": "Difference of Squares, Square of Sum, Square of Difference, Sum of Cubes, Difference of Cubes, Cube of Sum, Cube of Difference",
            "descriptionRu": "Разность квадратов, квадрат суммы, квадрат разности, сумма кубов, разность кубов, куб суммы, куб разности",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__ArithmeticExponentiation",
                    "rulePackNameEn": "Algebraic Numbers",
                    "rulePackNameRu": "Алгебраические числа"
                }
            ],
            "rules": [
                {
                    "code": "(+(^(a;2);-(^(b;2))))__to__(*(+(a;-(b));+(a;b)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;2);-(^(b;2))))",
                    "rightStructureString": "(*(+(a;-(b));+(a;b)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(*(+(a;-(b));+(a;b)))__to__(+(^(a;2);-(^(b;2))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(a;-(b));+(a;b)))",
                    "rightStructureString": "(+(^(a;2);-(^(b;2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(+(a;b);2))__to__(+(^(a;2);*(2;a;b);^(b;2)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(+(a;b);2))",
                    "rightStructureString": "(+(^(a;2);*(2;a;b);^(b;2)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;2);*(2;a;b);^(b;2)))__to__(^(+(a;b);2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;2);*(2;a;b);^(b;2)))",
                    "rightStructureString": "(^(+(a;b);2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;2);*(2;a);1))__to__(^(+(a;1);2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;2);*(2;a);1))",
                    "rightStructureString": "(^(+(a;1);2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(+(a;-(b));2))__to__(+(^(a;2);-(*(2;a;b));^(b;2)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(+(a;-(b));2))",
                    "rightStructureString": "(+(^(a;2);-(*(2;a;b));^(b;2)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;2);-(*(2;a;b));^(b;2)))__to__(^(+(a;-(b));2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;2);-(*(2;a;b));^(b;2)))",
                    "rightStructureString": "(^(+(a;-(b));2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;2);-(*(2;a));1))__to__(^(+(a;-(1));2))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;2);-(*(2;a));1))",
                    "rightStructureString": "(^(+(a;-(1));2))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(+(a;b);3))__to__(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(+(a;b);3))",
                    "rightStructureString": "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))__to__(^(+(a;b);3))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;3);*(3;^(a;2);b);*(3;a;^(b;2));^(b;3)))",
                    "rightStructureString": "(^(+(a;b);3))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;3);*(3;^(a;2));*(3;a);1))__to__(^(+(a;1);3))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;3);*(3;^(a;2));*(3;a);1))",
                    "rightStructureString": "(^(+(a;1);3))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(^(+(a;-(b));3))__to__(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(+(a;-(b));3))",
                    "rightStructureString": "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))__to__(^(+(a;-(b));3))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;3);-(*(3;^(a;2);b));*(3;a;^(b;2));-(^(b;3))))",
                    "rightStructureString": "(^(+(a;-(b));3))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))__to__(^(+(a;-(1));3))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;3);-(*(3;^(a;2)));*(3;a);-(1)))",
                    "rightStructureString": "(^(+(a;-(1));3))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;3);-(^(b;3))))__to__(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;3);-(^(b;3))))",
                    "rightStructureString": "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))__to__(+(^(a;3);-(^(b;3))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(a;-(b));+(^(a;2);*(a;b);^(b;2))))",
                    "rightStructureString": "(+(^(a;3);-(^(b;3))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(*(+(a;-(1));+(^(a;2);a;1)))__to__(+(^(a;3);-(^(1;3))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(a;-(1));+(^(a;2);a;1)))",
                    "rightStructureString": "(+(^(a;3);-(^(1;3))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(+(^(a;3);^(b;3)))__to__(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(^(a;3);^(b;3)))",
                    "rightStructureString": "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))__to__(+(^(a;3);^(b;3)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(a;b);+(^(a;2);-(*(a;b));^(b;2))))",
                    "rightStructureString": "(+(^(a;3);^(b;3)))",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(*(+(a;1);+(^(a;2);-(a);1)))__to__(+(^(a;3);^(1;3)))",
                    "priority": 25,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "normalizationType": "SORTED",
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(a;1);+(^(a;2);-(a);1)))",
                    "rightStructureString": "(+(^(a;3);^(1;3)))",
                    "matchJumbledAndNested": true
                }
            ],
            "serverActionTs": "2021-10-03T16:51:27.176+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__ArithmeticExponentiation",
            "version": 0,
            "nameEn": "Algebraic Numbers",
            "nameRu": "Алгебраические числа",
            "descriptionShortEn": "Pow, Ratio, Product, Difference, Sum",
            "descriptionShortRu": "Степень, частное, умножение, разность, сумма",
            "descriptionEn": "Pow, Division, Multiplication, Subtraction, Addition",
            "descriptionRu": "Возведение в степень, деление, умножение, вычитание, сложение",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__ArithmeticDivision",
                    "rulePackNameEn": "Rational Numbers",
                    "rulePackNameRu": "Рациональные числа"
                }
            ],
            "rules": [
                {
                    "code": "(a)__to__(^(a;1))",
                    "priority": 95,
                    "isExtending": true,
                    "simpleAdditional": true,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(a)",
                    "rightStructureString": "(^(a;1))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(1)__to__(^(1;2))",
                    "priority": 95,
                    "isExtending": true,
                    "simpleAdditional": true,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(1)",
                    "rightStructureString": "(^(1;2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(1)__to__(^(1;3))",
                    "priority": 95,
                    "isExtending": true,
                    "simpleAdditional": true,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(1)",
                    "rightStructureString": "(^(1;3))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(1;a))__to__(^(a;+(-(1))))",
                    "priority": 80,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;a))",
                    "rightStructureString": "(^(a;+(-(1))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;+(-(1))))__to__(/(1;a))",
                    "priority": 40,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;+(-(1))))",
                    "rightStructureString": "(/(1;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "PowFactorization",
                    "priority": 15,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;+(b;-(c))))__to__(/(^(a;b);^(a;c)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;+(b;-(c))))",
                    "rightStructureString": "(/(^(a;b);^(a;c)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(^(a;b);^(a;c)))__to__(^(a;+(b;-(c))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(^(a;b);^(a;c)))",
                    "rightStructureString": "(^(a;+(b;-(c))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(B;^(A;C)))__to__(*(B;^(A;+(-(C)))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(B;^(A;C)))",
                    "rightStructureString": "(*(B;^(A;+(-(C)))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(B;^(A;+(-(C)))))__to__(/(B;^(A;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(B;^(A;+(-(C)))))",
                    "rightStructureString": "(/(B;^(A;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(1;^(A;C)))__to__(^(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;^(A;C)))",
                    "rightStructureString": "(^(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(A;+(-(C))))__to__(/(1;^(A;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(A;+(-(C))))",
                    "rightStructureString": "(/(1;^(A;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;B))__to__(^(/(B;A);+(-(1))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;B))",
                    "rightStructureString": "(^(/(B;A);+(-(1))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(/(B;A);+(-(1))))__to__(/(A;B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(/(B;A);+(-(1))))",
                    "rightStructureString": "(/(A;B))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(A;0))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(A;0))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(1;A))__to__(1)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(1;A))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(A;1))__to__(A)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(A;1))",
                    "rightStructureString": "(A)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(0;A))__to__(0)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(0;A))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(a;a))__to__(^(a;2))",
                    "priority": 40,
                    "isExtending": false,
                    "simpleAdditional": true,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(a;a))",
                    "rightStructureString": "(^(a;2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;2))__to__(*(a;a))",
                    "priority": 40,
                    "isExtending": false,
                    "simpleAdditional": true,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;2))",
                    "rightStructureString": "(*(a;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(a;^(a;n)))__to__(^(a;+(n;1)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(a;^(a;n)))",
                    "rightStructureString": "(^(a;+(n;1)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;+(n;1)))__to__(*(a;^(a;n)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;+(n;1)))",
                    "rightStructureString": "(*(a;^(a;n)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(^(a;n);a))__to__(^(a;+(1;n)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(^(a;n);a))",
                    "rightStructureString": "(^(a;+(1;n)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;+(1;n)))__to__(*(^(a;n);a))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;+(1;n)))",
                    "rightStructureString": "(*(^(a;n);a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(^(a;n);a))__to__(^(a;+(n;-(1))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(^(a;n);a))",
                    "rightStructureString": "(^(a;+(n;-(1))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;+(n;-(1))))__to__(/(^(a;n);a))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;+(n;-(1))))",
                    "rightStructureString": "(/(^(a;n);a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(A;*(B;C)))__to__(^(^(A;B);C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(A;*(B;C)))",
                    "rightStructureString": "(^(^(A;B);C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(^(A;B);C))__to__(^(A;*(B;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(^(A;B);C))",
                    "rightStructureString": "(^(A;*(B;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(/(B;C);A))__to__(/(^(B;A);^(C;A)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(/(B;C);A))",
                    "rightStructureString": "(/(^(B;A);^(C;A)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(^(B;A);^(C;A)))__to__(^(/(B;C);A))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(^(B;A);^(C;A)))",
                    "rightStructureString": "(^(/(B;C);A))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(-(A);*(2;n)))__to__(^(A;*(2;n)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(-(A);*(2;n)))",
                    "rightStructureString": "(^(A;*(2;n)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(-(A);2))__to__(^(A;2))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(-(A);2))",
                    "rightStructureString": "(^(A;2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(+(-(A));*(2;n)))__to__(^(A;*(2;n)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(+(-(A));*(2;n)))",
                    "rightStructureString": "(^(A;*(2;n)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(+(-(A));2))__to__(^(A;2))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(+(-(A));2))",
                    "rightStructureString": "(^(A;2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;*(2;n)))__to__(^(+(-(a));*(2;n)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;*(2;n)))",
                    "rightStructureString": "(^(+(-(a));*(2;n)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(a;2))__to__(^(+(-(a));2))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(a;2))",
                    "rightStructureString": "(^(+(-(a));2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(^(^(a;b);/(1;b)))__to__(a)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(^(^(a;b);/(1;b)))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                }
            ],
            "serverActionTs": "2021-10-03T16:51:26.126+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__ArithmeticDivision",
            "version": 0,
            "nameEn": "Rational Numbers",
            "nameRu": "Рациональные числа",
            "descriptionShortEn": "Addition, Subtraction, Multiplication and Division",
            "descriptionShortRu": "Сложение, вычитание, уножение и деление",
            "descriptionEn": "",
            "descriptionRu": "",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__ArithmeticMultiplication",
                    "rulePackNameEn": "Addition Subtraction Multiplication",
                    "rulePackNameRu": "Сложение вычитание умножение"
                }
            ],
            "rules": [
                {
                    "code": "(/(0;a))__to__(0)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(0;a))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(a;1))__to__(a)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(a;1))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(a;a))__to__(1)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(a;a))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(/(1;a);a))__to__(1)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(/(1;a);a))",
                    "rightStructureString": "(1)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(1;/(1;a)))__to__(a)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;/(1;a)))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": true
                },
                {
                    "code": "(a)__to__(/(1;/(1;a)))",
                    "priority": 90,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(a)",
                    "rightStructureString": "(/(1;/(1;a)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0.5)__to__(/(1;2))",
                    "priority": 15,
                    "isExtending": false,
                    "simpleAdditional": true,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0.5)",
                    "rightStructureString": "(/(1;2))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(1;2))__to__(0.5)",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": true,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;2))",
                    "rightStructureString": "(0.5)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(a;b))__to__(/(*(a;b);*(b;b)))",
                    "priority": 90,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(a;b))",
                    "rightStructureString": "(/(*(a;b);*(b;b)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "MultiplicativeComplicatingExtension",
                    "priority": 92,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "ReduceFraction",
                    "priority": 10,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "DecimalToFraction",
                    "priority": 15,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(/(A;C)))__to__(/(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(/(A;C)))",
                    "rightStructureString": "(/(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(-(A);C))__to__(+(-(/(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(-(A);C))",
                    "rightStructureString": "(+(-(/(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(/(A;C)))__to__(/(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(/(A;C)))",
                    "rightStructureString": "(/(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;-(C)))__to__(+(-(/(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;-(C)))",
                    "rightStructureString": "(+(-(/(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;-(C)))__to__(/(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;-(C)))",
                    "rightStructureString": "(/(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(-(A);C))__to__(/(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(-(A);C))",
                    "rightStructureString": "(/(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(/(A;C))))__to__(/(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(/(A;C))))",
                    "rightStructureString": "(/(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(-(A));C))__to__(+(-(/(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(-(A));C))",
                    "rightStructureString": "(+(-(/(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(/(A;C))))__to__(/(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(/(A;C))))",
                    "rightStructureString": "(/(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;+(-(C))))__to__(+(-(/(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;+(-(C))))",
                    "rightStructureString": "(+(-(/(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;+(-(C))))__to__(/(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;+(-(C))))",
                    "rightStructureString": "(/(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(-(A));C))__to__(/(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(-(A));C))",
                    "rightStructureString": "(/(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(-(A);-(B)))__to__(/(A;B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(-(A);-(B)))",
                    "rightStructureString": "(/(A;B))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;B))__to__(/(+(-(A));+(-(B))))",
                    "priority": 80,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;B))",
                    "rightStructureString": "(/(+(-(A));+(-(B))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(+(-(A));+(-(B))))__to__(/(A;B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(+(-(A));+(-(B))))",
                    "rightStructureString": "(/(A;B))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(/(B;C);/(A;D)))__to__(/(+(*(B;D);*(C;A));*(C;D)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(/(B;C);/(A;D)))",
                    "rightStructureString": "(/(+(*(B;D);*(C;A));*(C;D)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(/(B;C);-(/(A;D))))__to__(/(+(*(B;D);-(*(C;A)));*(C;D)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(/(B;C);-(/(A;D))))",
                    "rightStructureString": "(/(+(*(B;D);-(*(C;A)));*(C;D)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(A;/(B;A)))__to__(B)",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(A;/(B;A)))",
                    "rightStructureString": "(B)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(/(B;A);A))__to__(B)",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(/(B;A);A))",
                    "rightStructureString": "(B)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(A;/(B;C)))__to__(/(*(A;B);C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(A;/(B;C)))",
                    "rightStructureString": "(/(*(A;B);C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(/(B;C);A))__to__(/(*(A;B);C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(/(B;C);A))",
                    "rightStructureString": "(/(*(A;B);C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;B))__to__(/(1;/(B;A)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;B))",
                    "rightStructureString": "(/(1;/(B;A)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(1;/(B;A)))__to__(/(A;B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(1;/(B;A)))",
                    "rightStructureString": "(/(A;B))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(A;B);C))__to__(*(A;/(B;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(A;B);C))",
                    "rightStructureString": "(*(A;/(B;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(/(B;C);A))__to__(/(B;*(A;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(/(B;C);A))",
                    "rightStructureString": "(/(B;*(A;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(B;*(A;C)))__to__(/(/(B;C);A))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(B;*(A;C)))",
                    "rightStructureString": "(/(/(B;C);A))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;/(B;C)))__to__(/(*(A;C);B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;/(B;C)))",
                    "rightStructureString": "(/(*(A;C);B))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(A;C);B))__to__(/(A;/(B;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(A;C);B))",
                    "rightStructureString": "(/(A;/(B;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;*(B;C)))__to__(*(/(A;B);/(1;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;*(B;C)))",
                    "rightStructureString": "(*(/(A;B);/(1;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(A;*(B;C)))__to__(*(/(1;B);/(A;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(A;*(B;C)))",
                    "rightStructureString": "(*(/(1;B);/(A;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(/(A;B);/(1;C)))__to__(/(A;*(B;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(/(A;B);/(1;C)))",
                    "rightStructureString": "(/(A;*(B;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(/(1;B);/(A;C)))__to__(/(A;*(B;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(/(1;B);/(A;C)))",
                    "rightStructureString": "(/(A;*(B;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(/(D;B);/(A;C)))__to__(/(*(D;A);*(B;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(/(D;B);/(A;C)))",
                    "rightStructureString": "(/(*(D;A);*(B;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(D;A);*(B;C)))__to__(*(/(D;B);/(A;C)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(D;A);*(B;C)))",
                    "rightStructureString": "(*(/(D;B);/(A;C)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(D;A);*(B;A)))__to__(/(D;B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(D;A);*(B;A)))",
                    "rightStructureString": "(/(D;B))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(D;A);*(D;C)))__to__(/(A;C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(D;A);*(D;C)))",
                    "rightStructureString": "(/(A;C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(D;A);D))__to__(A)",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(D;A);D))",
                    "rightStructureString": "(A)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(/(*(A;D);D))__to__(A)",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(/(*(A;D);D))",
                    "rightStructureString": "(A)",
                    "matchJumbledAndNested": false
                }
            ],
            "serverActionTs": "2021-10-03T16:51:25.436+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__ArithmeticMultiplication",
            "version": 0,
            "nameEn": "Addition Subtraction Multiplication",
            "nameRu": "Сложение вычитание умножение",
            "descriptionShortEn": "Arithmetic Addition, Subtraction and Multiplication",
            "descriptionShortRu": "Арифметическое сложение, вычитание и уножение",
            "descriptionEn": "",
            "descriptionRu": "",
            "subjectType": "standard_math",
            "rulePacks": [
                {
                    "namespaceCode": "global",
                    "rulePackCode": "global__ArithmeticAddition",
                    "rulePackNameEn": "Addition and Subtraction",
                    "rulePackNameRu": "Сложение и вычитание"
                }
            ],
            "rules": [
                {
                    "code": "(*(a;0))__to__(0)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(a;0))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(0;a))__to__(0)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(0;a))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(0)__to__(*(a;0))",
                    "priority": 35,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(0)",
                    "rightStructureString": "(*(a;0))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(a;1))__to__(a)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(a;1))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(1;a))__to__(a)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(1;a))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(a)__to__(*(a;1))",
                    "priority": 35,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(a)",
                    "rightStructureString": "(*(a;1))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(a;b))__to__(*(b;a))",
                    "priority": 20,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(a;b))",
                    "rightStructureString": "(*(b;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "OpeningBrackets",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "ReduceArithmetic",
                    "priority": 10,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "TwoSidesArithmeticReduce",
                    "priority": 10,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "MultiplicationFactorization",
                    "priority": 15,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(a;a))__to__(*(2;a))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(a;a))",
                    "rightStructureString": "(*(2;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(a;+(a)))__to__(*(2;a))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(a;+(a)))",
                    "rightStructureString": "(*(2;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(+(a);a))__to__(*(2;a))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(+(a);a))",
                    "rightStructureString": "(*(2;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(2;a))__to__(+(a;a))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(2;a))",
                    "rightStructureString": "(+(a;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(a;*(a;n)))__to__(*(a;+(n;1)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(a;*(a;n)))",
                    "rightStructureString": "(*(a;+(n;1)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(a;+(n;1)))__to__(+(a;*(a;n)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(a;+(n;1)))",
                    "rightStructureString": "(+(a;*(a;n)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(*(a;n);a))__to__(*(a;+(1;n)))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(*(a;n);a))",
                    "rightStructureString": "(*(a;+(1;n)))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(a;+(1;n)))__to__(+(*(a;n);a))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(a;+(1;n)))",
                    "rightStructureString": "(+(*(a;n);a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(*(A;C)))__to__(*(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(*(A;C)))",
                    "rightStructureString": "(*(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(-(A);C))__to__(+(-(*(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(-(A);C))",
                    "rightStructureString": "(+(-(*(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(*(A;C)))__to__(*(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(*(A;C)))",
                    "rightStructureString": "(*(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(A;-(C)))__to__(+(-(*(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(A;-(C)))",
                    "rightStructureString": "(+(-(*(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(A;-(C)))__to__(*(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(A;-(C)))",
                    "rightStructureString": "(*(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(-(A);C))__to__(*(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(-(A);C))",
                    "rightStructureString": "(*(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(*(A;C))))__to__(*(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(*(A;C))))",
                    "rightStructureString": "(*(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(+(-(A));C))__to__(+(-(*(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(-(A));C))",
                    "rightStructureString": "(+(-(*(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(*(A;C))))__to__(*(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(*(A;C))))",
                    "rightStructureString": "(*(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(A;+(-(C))))__to__(+(-(*(A;C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(A;+(-(C))))",
                    "rightStructureString": "(+(-(*(A;C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(A;+(-(C))))__to__(*(+(-(A));C))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(A;+(-(C))))",
                    "rightStructureString": "(*(+(-(A));C))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(+(-(A));C))__to__(*(A;+(-(C))))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(-(A));C))",
                    "rightStructureString": "(*(A;+(-(C))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(-(A);-(B)))__to__(*(A;B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(-(A);-(B)))",
                    "rightStructureString": "(*(A;B))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(A;B))__to__(*(+(-(A));+(-(B))))",
                    "priority": 80,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(A;B))",
                    "rightStructureString": "(*(+(-(A));+(-(B))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(*(+(-(A));+(-(B))))__to__(*(A;B))",
                    "priority": 35,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(*(+(-(A));+(-(B))))",
                    "rightStructureString": "(*(A;B))",
                    "matchJumbledAndNested": false
                }
            ],
            "serverActionTs": "2021-10-03T16:51:24.908+00:00"
        },
        {
            "namespaceCode": "global",
            "code": "global__ArithmeticAddition",
            "version": 0,
            "nameEn": "Addition and Subtraction",
            "nameRu": "Сложение и вычитание",
            "descriptionShortEn": "Arithmetic Addition and Subtraction",
            "descriptionShortRu": "Арифметическое сложение и вычитание",
            "descriptionEn": "",
            "descriptionRu": "",
            "subjectType": "standard_math",
            "rules": [
                {
                    "code": "(+(a))__to__(a)",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(a))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(a;b))__to__(+(b;a))",
                    "priority": 20,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(a;b))",
                    "rightStructureString": "(+(b;a))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(a)__to__(+(a;0))",
                    "priority": 90,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(a)",
                    "rightStructureString": "(+(a;0))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(+(-(a)))))__to__(a)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(+(-(a)))))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(+(-(a))))__to__(a)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(+(-(a))))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(-(-(a)))__to__(a)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(-(-(a)))",
                    "rightStructureString": "(a)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(a)__to__(-(+(-(a))))",
                    "priority": 95,
                    "isExtending": true,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(a)",
                    "rightStructureString": "(-(+(-(a))))",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(a;-(a)))__to__(0)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(a;-(a)))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(-(a);a))__to__(0)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(-(a);a))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(a;+(-(a))))__to__(0)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(a;+(-(a))))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "(+(+(-(a));a))__to__(0)",
                    "priority": 4,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "(+(+(-(a));a))",
                    "rightStructureString": "(0)",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "SimpleComputation",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "ZeroComputation",
                    "priority": 5,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "NumberPlusMinus1",
                    "priority": 20,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "MinusInOutBrackets",
                    "priority": 31,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "ParentBracketsExpansion",
                    "priority": 30,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "ArgumentsSwap",
                    "priority": 40,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "ArgumentsPermutation",
                    "priority": 40,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "ArgumentsPermutationInOriginalOrder",
                    "priority": 41,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                },
                {
                    "code": "AdditiveComplicatingExtension",
                    "priority": 92,
                    "isExtending": false,
                    "simpleAdditional": false,
                    "basedOnTaskContext": false,
                    "leftStructureString": "",
                    "rightStructureString": "",
                    "matchJumbledAndNested": false
                }
            ],
            "serverActionTs": "2021-10-03T16:51:24.367+00:00"
        }
    ],
    "taskset": {
        "code": "global__CheckYourselfTrigonometry",
        "version": 6,
        "namespaceCode": "global",
        "nameEn": "[Check Yourself] Trigonometry",
        "nameRu": "[Проверь себя] Тригонометрия",
        "descriptionShortEn": "Expression transformations in trigonometry",
        "descriptionShortRu": "Преобразования выражений в тригонометрии",
        "descriptionEn": "[Check Yourself] Expression transformations in trigonometry",
        "descriptionRu": "[Проверь себя] Преобразования выражений в тригонометрии",
        "subjectType": "standard_math",
        "recommendedByCommunity": false,
        "tasks": [
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__1_Proof",
                "version": 5,
                "taskCreationType": "",
                "nameEn": "Level 1 Proof",
                "nameRu": "Уровень 1 Доказательство",
                "descriptionShortEn": "Relate to",
                "descriptionShortRu": "Свести к",
                "descriptionEn": "Prove  \u0027tg(4*x)-1/cos(4*x) \u003d (sin(2*x)-cos(2*x))/(sin(2*x)+cos(2*x))\u0027",
                "descriptionRu": "Доказать  \u0027tg(4*x)-1/cos(4*x) \u003d (sin(2*x)-cos(2*x))/(sin(2*x)+cos(2*x))\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(+(tg(*(4;x));-(/(1;cos(*(4;x))))))",
                "originalExpressionTex": "tg\\left(4 \\cdot x\\right) - \\frac{1}{cos\\left(4 \\cdot x\\right)}",
                "originalExpressionPlainText": "tg(4*x)-1/cos(4*x)",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "tg\\left(4 \\cdot x\\right) - \\frac{1}{cos\\left(4 \\cdot x\\right)}"
                },
                "goalType": "EXPRESSION",
                "goalExpressionStructureString": "(/(+(sin(*(2;x));-(cos(*(2;x))));+(sin(*(2;x));cos(*(2;x)))))",
                "goalExpressionTex": "\\frac{sin\\left(2 \\cdot x\\right) - cos\\left(2 \\cdot x\\right)}{sin\\left(2 \\cdot x\\right) + cos\\left(2 \\cdot x\\right)}",
                "goalExpressionPlainText": "(sin(2*x)-cos(2*x))/(sin(2*x)+cos(2*x))",
                "goalExpression": {
                    "format": "TEX",
                    "expression": "\\frac{sin\\left(2 \\cdot x\\right) - cos\\left(2 \\cdot x\\right)}{sin\\left(2 \\cdot x\\right) + cos\\left(2 \\cdot x\\right)}"
                },
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 4.8,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__2_Computation",
                "version": 6,
                "taskCreationType": "",
                "nameEn": "Level 2 Computation",
                "nameRu": "Уровень 2 Вычисление",
                "descriptionShortEn": "Compute",
                "descriptionShortRu": "Вычислить",
                "descriptionEn": "Compute \u0027(sin((3*pi)/10)*cos((2*pi)/5)+cos((3*pi)/10)*sin((2*pi)/5))^2+(cos(pi/10)*cos((3*pi)/5)-sin(pi/10)*sin((3*pi)/5))^2\u0027",
                "descriptionRu": "Вычислить \u0027(sin((3*pi)/10)*cos((2*pi)/5)+cos((3*pi)/10)*sin((2*pi)/5))^2+(cos(pi/10)*cos((3*pi)/5)-sin(pi/10)*sin((3*pi)/5))^2\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(+(^(+(*(sin(/(*(3;π);10));cos(/(*(2;π);5)));*(cos(/(*(3;π);10));sin(/(*(2;π);5))));2);^(+(*(cos(/(π;10));cos(/(*(3;π);5)));-(*(sin(/(π;10));sin(/(*(3;π);5)))));2)))",
                "originalExpressionTex": "{\\left(sin\\left(\\frac{3 \\cdot pi}{10}\\right) \\cdot cos\\left(\\frac{2 \\cdot pi}{5}\\right) + cos\\left(\\frac{3 \\cdot pi}{10}\\right) \\cdot sin\\left(\\frac{2 \\cdot pi}{5}\\right)\\right)^{2}} + {\\left(cos\\left(\\frac{pi}{10}\\right) \\cdot cos\\left(\\frac{3 \\cdot pi}{5}\\right) - sin\\left(\\frac{pi}{10}\\right) \\cdot sin\\left(\\frac{3 \\cdot pi}{5}\\right)\\right)^{2}}",
                "originalExpressionPlainText": "(sin((3*π)/10)*cos((2*π)/5)+cos((3*π)/10)*sin((2*π)/5))^2+(cos(π/10)*cos((3*π)/5)-sin(π/10)*sin((3*π)/5))^2",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "{\\left(sin\\left(\\frac{3 \\cdot pi}{10}\\right) \\cdot cos\\left(\\frac{2 \\cdot pi}{5}\\right) + cos\\left(\\frac{3 \\cdot pi}{10}\\right) \\cdot sin\\left(\\frac{2 \\cdot pi}{5}\\right)\\right)^{2}} + {\\left(cos\\left(\\frac{pi}{10}\\right) \\cdot cos\\left(\\frac{3 \\cdot pi}{5}\\right) - sin\\left(\\frac{pi}{10}\\right) \\cdot sin\\left(\\frac{3 \\cdot pi}{5}\\right)\\right)^{2}}"
                },
                "goalType": "COMPUTATION",
                "goalExpressionStructureString": "",
                "goalExpressionTex": "",
                "goalExpressionPlainText": "",
                "goalPattern": "+:0-1(-:1):?:?R",
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 4.4,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__3_Computation",
                "version": 6,
                "taskCreationType": "",
                "nameEn": "Level 3 Computation",
                "nameRu": "Уровень 3 Вычисление",
                "descriptionShortEn": "Compute if \u0027tg(2*x) \u003d 4\u0027",
                "descriptionShortRu": "Вычислить, если \u0027tg(2*x) \u003d 4\u0027",
                "descriptionEn": "Compute \u0027sin(4*x)+cos(4*x)*ctg(2*x)\u0027 if \u0027tg(2*x) \u003d 4\u0027",
                "descriptionRu": "Вычислить \u0027sin(4*x)+cos(4*x)*ctg(2*x)\u0027, если \u0027tg(2*x) \u003d 4\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(+(sin(*(4;x));*(cos(*(4;x));ctg(*(2;x)))))",
                "originalExpressionTex": "sin\\left(4 \\cdot x\\right) + cos\\left(4 \\cdot x\\right) \\cdot ctg\\left(2 \\cdot x\\right)",
                "originalExpressionPlainText": "sin(4*x)+cos(4*x)*ctg(2*x)",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "sin\\left(4 \\cdot x\\right) + cos\\left(4 \\cdot x\\right) \\cdot ctg\\left(2 \\cdot x\\right)"
                },
                "goalType": "COMPUTATION",
                "goalExpressionStructureString": "",
                "goalExpressionTex": "",
                "goalExpressionPlainText": "",
                "goalPattern": "+:0-1(-:1):?:?R",
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [
                    {
                        "code": "(tg(*(2;x)))__to__(4)",
                        "left": {
                            "format": "TEX",
                            "expression": "tg\\left(2 \\cdot x\\right)"
                        },
                        "right": {
                            "format": "TEX",
                            "expression": "4"
                        },
                        "priority": 2,
                        "isExtending": false,
                        "simpleAdditional": false,
                        "normalizationType": "ORIGINAL",
                        "basedOnTaskContext": true,
                        "leftStructureString": "(tg(*(2;x)))",
                        "rightStructureString": "(4)",
                        "matchJumbledAndNested": false
                    }
                ],
                "tags": [],
                "difficulty": 4.6,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__4_Proof",
                "version": 5,
                "taskCreationType": "",
                "nameEn": "Level 4 Proof",
                "nameRu": "Уровень 4 Доказательство",
                "descriptionShortEn": "Relate to",
                "descriptionShortRu": "Свести к",
                "descriptionEn": "Prove  \u0027(1+cos(x/2)-sin(x/2))/(1-cos(x/2)-sin(x/2)) \u003d -ctg(x/4)\u0027",
                "descriptionRu": "Доказать  \u0027(1+cos(x/2)-sin(x/2))/(1-cos(x/2)-sin(x/2)) \u003d -ctg(x/4)\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(/(+(1;cos(/(x;2));-(sin(/(x;2))));+(1;-(cos(/(x;2)));-(sin(/(x;2))))))",
                "originalExpressionTex": "\\frac{1 + cos\\left(\\frac{x}{2}\\right) - sin\\left(\\frac{x}{2}\\right)}{1 - cos\\left(\\frac{x}{2}\\right) - sin\\left(\\frac{x}{2}\\right)}",
                "originalExpressionPlainText": "(1+cos(x/2)-sin(x/2))/(1-cos(x/2)-sin(x/2))",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "\\frac{1 + cos\\left(\\frac{x}{2}\\right) - sin\\left(\\frac{x}{2}\\right)}{1 - cos\\left(\\frac{x}{2}\\right) - sin\\left(\\frac{x}{2}\\right)}"
                },
                "goalType": "EXPRESSION",
                "goalExpressionStructureString": "(+(-(ctg(/(x;4)))))",
                "goalExpressionTex": " - ctg\\left(\\frac{x}{4}\\right)",
                "goalExpressionPlainText": "-ctg(x/4)",
                "goalExpression": {
                    "format": "TEX",
                    "expression": " - ctg\\left(\\frac{x}{4}\\right)"
                },
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 5.8,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__5_Proof",
                "version": 5,
                "taskCreationType": "",
                "nameEn": "Level 5 Proof",
                "nameRu": "Уровень 5 Доказательство",
                "descriptionShortEn": "Relate to",
                "descriptionShortRu": "Свести к",
                "descriptionEn": "Prove  \u0027sin((9*pi)/8+x)^2-sin((17*pi)/8-x)^2 \u003d sin(2*x)/2^0.5\u0027",
                "descriptionRu": "Доказать  \u0027sin((9*pi)/8+x)^2-sin((17*pi)/8-x)^2 \u003d sin(2*x)/2^0.5\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(+(^(sin(+(/(*(9;π);8);x));2);-(^(sin(+(/(*(17;π);8);-(x)));2))))",
                "originalExpressionTex": "{sin\\left(\\frac{9 \\cdot pi}{8} + x\\right)^{2}} - {sin\\left(\\frac{17 \\cdot pi}{8} - x\\right)^{2}}",
                "originalExpressionPlainText": "sin((9*π)/8+x)^2-sin((17*π)/8-x)^2",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "{sin\\left(\\frac{9 \\cdot pi}{8} + x\\right)^{2}} - {sin\\left(\\frac{17 \\cdot pi}{8} - x\\right)^{2}}"
                },
                "goalType": "EXPRESSION",
                "goalExpressionStructureString": "(/(sin(*(2;x));^(2;0.5)))",
                "goalExpressionTex": "\\frac{sin\\left(2 \\cdot x\\right)}{{2^{0.5}}}",
                "goalExpressionPlainText": "sin(2*x)/2^0.5",
                "goalExpression": {
                    "format": "TEX",
                    "expression": "\\frac{sin\\left(2 \\cdot x\\right)}{{2^{0.5}}}"
                },
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 6.2,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__6_Proof",
                "version": 5,
                "taskCreationType": "",
                "nameEn": "Level 6 Proof",
                "nameRu": "Уровень 6 Доказательство",
                "descriptionShortEn": "Relate to",
                "descriptionShortRu": "Свести к",
                "descriptionEn": "Prove  \u0027(cos(x)+cos(2*x)+cos(3*x))/(sin(x)+sin(2*x)+sin(3*x)) \u003d ctg(2*x)\u0027",
                "descriptionRu": "Доказать  \u0027(cos(x)+cos(2*x)+cos(3*x))/(sin(x)+sin(2*x)+sin(3*x)) \u003d ctg(2*x)\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(/(+(cos(x);cos(*(2;x));cos(*(3;x)));+(sin(x);sin(*(2;x));sin(*(3;x)))))",
                "originalExpressionTex": "\\frac{cos\\left(x\\right) + cos\\left(2 \\cdot x\\right) + cos\\left(3 \\cdot x\\right)}{sin\\left(x\\right) + sin\\left(2 \\cdot x\\right) + sin\\left(3 \\cdot x\\right)}",
                "originalExpressionPlainText": "(cos(x)+cos(2*x)+cos(3*x))/(sin(x)+sin(2*x)+sin(3*x))",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "\\frac{cos\\left(x\\right) + cos\\left(2 \\cdot x\\right) + cos\\left(3 \\cdot x\\right)}{sin\\left(x\\right) + sin\\left(2 \\cdot x\\right) + sin\\left(3 \\cdot x\\right)}"
                },
                "goalType": "EXPRESSION",
                "goalExpressionStructureString": "(ctg(*(2;x)))",
                "goalExpressionTex": "ctg\\left(2 \\cdot x\\right)",
                "goalExpressionPlainText": "ctg(2*x)",
                "goalExpression": {
                    "format": "TEX",
                    "expression": "ctg\\left(2 \\cdot x\\right)"
                },
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 5.2,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__7_Proof",
                "version": 5,
                "taskCreationType": "",
                "nameEn": "Level 7 Proof",
                "nameRu": "Уровень 7 Доказательство",
                "descriptionShortEn": "Relate to",
                "descriptionShortRu": "Свести к",
                "descriptionEn": "Prove  \u0027(cos(4*x)+1)/(ctg(x)-tg(x)) \u003d sin(4*x)/2\u0027",
                "descriptionRu": "Доказать  \u0027(cos(4*x)+1)/(ctg(x)-tg(x)) \u003d sin(4*x)/2\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(/(+(cos(*(4;x));1);+(ctg(x);-(tg(x)))))",
                "originalExpressionTex": "\\frac{cos\\left(4 \\cdot x\\right) + 1}{ctg\\left(x\\right) - tg\\left(x\\right)}",
                "originalExpressionPlainText": "(cos(4*x)+1)/(ctg(x)-tg(x))",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "\\frac{cos\\left(4 \\cdot x\\right) + 1}{ctg\\left(x\\right) - tg\\left(x\\right)}"
                },
                "goalType": "EXPRESSION",
                "goalExpressionStructureString": "(/(sin(*(4;x));2))",
                "goalExpressionTex": "\\frac{sin\\left(4 \\cdot x\\right)}{2}",
                "goalExpressionPlainText": "sin(4*x)/2",
                "goalExpression": {
                    "format": "TEX",
                    "expression": "\\frac{sin\\left(4 \\cdot x\\right)}{2}"
                },
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 5.0,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__8_Computation",
                "version": 6,
                "taskCreationType": "",
                "nameEn": "Level 8 Computation",
                "nameRu": "Уровень 8 Вычисление",
                "descriptionShortEn": "Compute",
                "descriptionShortRu": "Вычислить",
                "descriptionEn": "Compute \u0027tg(π/9)*tg((2*π)/9)*tg((3*π)/9)*tg((4*π)/9)\u0027",
                "descriptionRu": "Вычислить \u0027tg(π/9)*tg((2*π)/9)*tg((3*π)/9)*tg((4*π)/9)\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(*(tg(/(π;9));tg(/(*(2;π);9));tg(/(*(3;π);9));tg(/(*(4;π);9))))",
                "originalExpressionTex": "tg\\left(\\frac{π}{9}\\right) \\cdot tg\\left(\\frac{2 \\cdot π}{9}\\right) \\cdot tg\\left(\\frac{3 \\cdot π}{9}\\right) \\cdot tg\\left(\\frac{4 \\cdot π}{9}\\right)",
                "originalExpressionPlainText": "tg(π/9)*tg((2*π)/9)*tg((3*π)/9)*tg((4*π)/9)",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "tg\\left(\\frac{π}{9}\\right) \\cdot tg\\left(\\frac{2 \\cdot π}{9}\\right) \\cdot tg\\left(\\frac{3 \\cdot π}{9}\\right) \\cdot tg\\left(\\frac{4 \\cdot π}{9}\\right)"
                },
                "goalType": "COMPUTATION",
                "goalExpressionStructureString": "",
                "goalExpressionTex": "",
                "goalExpressionPlainText": "",
                "goalPattern": "+:0-1(-:1):?:?R",
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 5.8,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__9_Proof",
                "version": 5,
                "taskCreationType": "",
                "nameEn": "Level 9 Proof",
                "nameRu": "Уровень 9 Доказательство",
                "descriptionShortEn": "Relate to",
                "descriptionShortRu": "Свести к",
                "descriptionEn": "Prove  \u0027sin((4*π-3*x)/3)*sin((2*π-3*x)/3)-cos(π/3+x)*cos((19*π-3*x)/3) \u003d -cos(2*x)\u0027",
                "descriptionRu": "Доказать  \u0027sin((4*π-3*x)/3)*sin((2*π-3*x)/3)-cos(π/3+x)*cos((19*π-3*x)/3) \u003d -cos(2*x)\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(+(*(sin(/(+(*(4;π);-(*(3;x)));3));sin(/(+(*(2;π);-(*(3;x)));3)));-(*(cos(+(/(π;3);x));cos(/(+(*(19;π);-(*(3;x)));3))))))",
                "originalExpressionTex": "sin\\left(\\frac{4 \\cdot π - 3 \\cdot x}{3}\\right) \\cdot sin\\left(\\frac{2 \\cdot π - 3 \\cdot x}{3}\\right) - cos\\left(\\frac{π}{3} + x\\right) \\cdot cos\\left(\\frac{19 \\cdot π - 3 \\cdot x}{3}\\right)",
                "originalExpressionPlainText": "sin((4*π-3*x)/3)*sin((2*π-3*x)/3)-cos(π/3+x)*cos((19*π-3*x)/3)",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "sin\\left(\\frac{4 \\cdot π - 3 \\cdot x}{3}\\right) \\cdot sin\\left(\\frac{2 \\cdot π - 3 \\cdot x}{3}\\right) - cos\\left(\\frac{π}{3} + x\\right) \\cdot cos\\left(\\frac{19 \\cdot π - 3 \\cdot x}{3}\\right)"
                },
                "goalType": "EXPRESSION",
                "goalExpressionStructureString": "(+(-(cos(*(2;x)))))",
                "goalExpressionTex": " - cos\\left(2 \\cdot x\\right)",
                "goalExpressionPlainText": "-cos(2*x)",
                "goalExpression": {
                    "format": "TEX",
                    "expression": " - cos\\left(2 \\cdot x\\right)"
                },
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [],
                "tags": [],
                "difficulty": 4.8,
                "countOfAutoGeneratedTasks": 0
            },
            {
                "namespaceCode": "global",
                "code": "global__CheckYourselfTrigonometry__10_Proof",
                "version": 6,
                "taskCreationType": "",
                "nameEn": "Level 10 Proof",
                "nameRu": "Уровень 10 Доказательство",
                "descriptionShortEn": "Relate to",
                "descriptionShortRu": "Свести к",
                "descriptionEn": "Prove  \u0027(1+sin(x))/(1-sin(x)) \u003d tg(π/4+x/2)^2\u0027",
                "descriptionRu": "Доказать  \u0027(1+sin(x))/(1-sin(x)) \u003d tg(π/4+x/2)^2\u0027",
                "subjectType": "standard_math",
                "originalExpressionStructureString": "(/(+(1;sin(x));+(1;-(sin(x)))))",
                "originalExpressionTex": "\\frac{1 + sin\\left(x\\right)}{1 - sin\\left(x\\right)}",
                "originalExpressionPlainText": "(1+sin(x))/(1-sin(x))",
                "originalExpression": {
                    "format": "TEX",
                    "expression": "\\frac{1 + sin\\left(x\\right)}{1 - sin\\left(x\\right)}"
                },
                "goalType": "EXPRESSION",
                "goalExpressionStructureString": "(^(tg(+(/(π;4);/(x;2)));2))",
                "goalExpressionTex": "{tg\\left(\\frac{π}{4} + \\frac{x}{2}\\right)^{2}}",
                "goalExpressionPlainText": "tg(π/4+x/2)^2",
                "goalExpression": {
                    "format": "TEX",
                    "expression": "{tg\\left(\\frac{π}{4} + \\frac{x}{2}\\right)^{2}}"
                },
                "otherGoalData": {},
                "rulePacks": [
                    {
                        "namespaceCode": "global",
                        "rulePackCode": "global__AdvancedTrigonometry",
                        "rulePackNameEn": "Advanced Trigonometry",
                        "rulePackNameRu": "Продвинутая тригонометрия"
                    }
                ],
                "rules": [
                    {
                        "code": "",
                        "left": {
                            "format": "TEX",
                            "expression": "a"
                        },
                        "right": {
                            "format": "TEX",
                            "expression": "15"
                        },
                        "nameEn": "",
                        "nameRu": "",
                        "weight": 0,
                        "priority": 0,
                        "isExtending": true,
                        "descriptionEn": "",
                        "descriptionRu": "",
                        "simpleAdditional": true,
                        "normalizationType": "",
                        "basedOnTaskContext": true,
                        "descriptionShortEn": "",
                        "descriptionShortRu": "",
                        "leftStructureString": "(a)",
                        "rightStructureString": "(15)",
                        "matchJumbledAndNested": true
                    },
                    {
                        "code": "",
                        "left": {
                            "format": "TEX",
                            "expression": "b"
                        },
                        "right": {
                            "format": "TEX",
                            "expression": "5"
                        },
                        "nameEn": "",
                        "nameRu": "",
                        "weight": 0,
                        "priority": 0,
                        "isExtending": true,
                        "descriptionEn": "",
                        "descriptionRu": "",
                        "simpleAdditional": false,
                        "normalizationType": "",
                        "basedOnTaskContext": true,
                        "descriptionShortEn": "",
                        "descriptionShortRu": "",
                        "leftStructureString": "(b)",
                        "rightStructureString": "(5)",
                        "matchJumbledAndNested": false
                    }
                ],
                "tags": [],
                "difficulty": 5.1,
                "countOfAutoGeneratedTasks": 0
            }
        ],
        "tags": [
            "CheckYourself",
            "Trigonometry"
        ],
        "serverActionTs": "2021-12-20T15:33:01.437+00:00"
    }
}